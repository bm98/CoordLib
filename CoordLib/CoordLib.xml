<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoordLib</name>
    </assembly>
    <members>
        <member name="T:CoordLib.ConvConsts">
            <summary>
            Useful conversions and constants
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.KmPerSm">
            <summary>
            Const Km per Sm (Statute Mile)
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.KmPerNm">
            <summary>
            Const Km per Nm
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.MPerFt">
            <summary>
            Const M per Ft
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.EarthRadiusM">
            <summary>
            Const Earth radius in M
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.EarthFlattening_WGS84">
            <summary>
            Const Earth Flattening for the WGS 84 spheroid
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.EarthRadiusKm">
            <summary>
            Const Earth radius in km
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.EarthRadiusNm">
            <summary>
            Const Earth radius in Nm
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.EarthRadiusSM">
            <summary>
            Const Earth radius in SM
            </summary>
        </member>
        <member name="M:CoordLib.ConvConsts.MToNm(System.Double)">
            <summary>
            Convert m to nm
            </summary>
            <param name="m">m to convert</param>
            <returns>nm</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.MToSm(System.Double)">
            <summary>
            Convert m to Sm
            </summary>
            <param name="m">m to convert</param>
            <returns>Sm</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.KmToNm(System.Double)">
            <summary>
            Convert km to nm
            </summary>
            <param name="km">km to convert</param>
            <returns>nm</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.KmToSm(System.Double)">
            <summary>
            Convert km to Sm
            </summary>
            <param name="km">km to convert</param>
            <returns>Sm</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.NmToM(System.Double)">
            <summary>
            Convert nm to m
            </summary>
            <param name="nm">nm to convert</param>
            <returns>m</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.SmToM(System.Double)">
            <summary>
            Convert Sm to m
            </summary>
            <param name="sm">Sm to convert</param>
            <returns>m</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.NmToKm(System.Double)">
            <summary>
            Convert nm to km
            </summary>
            <param name="nm">nm to convert</param>
            <returns>km</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.SmToKm(System.Double)">
            <summary>
            Convert Sm to km
            </summary>
            <param name="sm">Sm to convert</param>
            <returns>km</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.MToFt(System.Double)">
            <summary>
            Convert m to ft
            </summary>
            <param name="m">m to convert</param>
            <returns>ft</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.FtToM(System.Double)">
            <summary>
            Convert ft to m
            </summary>
            <param name="ft">ft to convert</param>
            <returns>m</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.ToRadians(System.Double)">
            <summary>
            Convert Radians to Degrees
            </summary>
            <param name="angleInDegree">An angle in degrees</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.ToDegrees(System.Double)">
            <summary>
            Convert Degrees to Radians
            </summary>
            <param name="angleInRadians">An angle in radians</param>
            <returns>The angle in degrees</returns>
        </member>
        <member name="T:CoordLib.Dms">
            <summary>
            Geodesy representation conversion functions  
            Latitude/longitude points may be represented as double degrees, or subdivided into sexagesimal
            minutes and seconds.
            1:1 C# translation from above
            </summary>
        </member>
        <member name="F:CoordLib.Dms.NbSpace">
            <summary>
            Non Breaking Space char
            </summary>
        </member>
        <member name="M:CoordLib.Dms.ParseDMS(System.String,System.Char)">
            <summary>
            Parses string representing degrees/minutes/seconds into numeric degrees.
            
            This is very flexible on formats, allowing signed double degrees, or deg-min-sec optionally
            suffixed by compass direction( NSEW). A variety of separators are accepted( eg 3° 37′ 09″W).
            Seconds and minutes may be omitted.
            
            Note: 
               for non separated latitudes  (e.g. N022332) provide leading zeros 2,4,6 digit strings
               for non separated longitudes (e.g. W0022332) provide leading zeros 3,5,7 digit strings
               
             var lat = Dms.parseDMS("N51° 28' 40.12\"");
             var lon = Dms.parseDMS( "W0° 00' 5.31\"" );
             var p1 = new LatLon( lat, lon ); N51.4778°, W0.0015°
             
            Caution: No checks for the validity of Lat/Lon degree range are made
                     returns only the number or double.NaN for invalid formats
                     
            </summary>
            <param name="dmsStr">{string|number} dmsStr - Degrees or deg/min/sec in variety of formats.</param>
            <param name="separator">Item separator character used - default a space</param>
            <returns>{number} Degrees as double number.</returns>
        </member>
        <member name="M:CoordLib.Dms.ParseRouteCoord(System.String)">
            <summary>
            Parse a Route Coord string (DD[MM[SS]]{N|S}DDD[MM[SS]]{E|W})
             Lat: 000000..900000
             Lon: 0000000..1800000
            </summary>
            <param name="rtCoordStr">A route coord string</param>
            <returns>A LatLon</returns>
        </member>
        <member name="M:CoordLib.Dms.ToRouteCoord(CoordLib.LatLon,System.String)">
            <summary>
            Converts a LatLon to a Route COORD string 
            DDMM[SS]{N|S}DDDMM[SS]{E|W} 0..89°59'59" N/S 0..180°00'00" E/W
            </summary>
            <param name="latLon">A LatLon</param>
            <param name="format">{string} [format=dm] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.</param>
            <returns>A coord string</returns>
        </member>
        <member name="M:CoordLib.Dms.ToDMS(System.Double,System.Boolean,System.String,System.Char,System.Int32)">
            <summary>
            Converts double degrees to deg/min/sec format
             - degree, prime, double-prime symbols are added, but sign is discarded, though no compass
            direction is added.
            </summary>
            <param name="deg">{number} deg - Degrees to be formatted as specified.</param>
            <param name="lat">bool - Format Latitude(00 Deg), else it is Longitude(000 Deg)</param>
            <param name="format">{string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.</param>
            <param name="separator">Item separator character - default a space</param>
            <param name="dPlaces">{number} [dp=0|2|4] - Number of double places to use – default 0 for dms, 2 for dm, 4 for d.</param>
            <returns>{string} Degrees formatted as deg/min/secs according to specified format.</returns>
        </member>
        <member name="M:CoordLib.Dms.ToDMSarray(System.Double,System.Boolean)">
            <summary>
            Converts double degrees to deg/min/sec string array
             - returns a string array where [0] +-Degree, [1] Min and [2] Sec
            </summary>
            <param name="deg">{number} deg - Degrees to be formatted as specified.</param>
            <param name="lat">bool - Format Latitude(00 Deg), else it is Longitude(000 Deg)</param>
            <returns>{string} Degrees formatted as deg/min/secs according to specified format.</returns>
        </member>
        <member name="M:CoordLib.Dms.ToLat(System.Double,System.String,System.Char,System.Int32)">
            <summary>
            Converts numeric degrees to deg/min/sec latitude (2-digit degrees, prefixed with N/S).
            </summary>
            <param name="deg">{number} deg - Degrees to be formatted as specified.</param>
            <param name="format">{string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.</param>
            <param name="separator">Item separator character - default a space</param>
            <param name="dPlaces">{number} [dp=0|2|4] - Number of double places to use – default 0 for dms, 2 for dm, 4 for d.</param>
            <returns>{string} Degrees formatted as deg/min/secs according to specified format.</returns>
        </member>
        <member name="M:CoordLib.Dms.ToLon(System.Double,System.String,System.Char,System.Int32)">
            <summary>
            Convert numeric degrees to deg/min/sec longitude (3-digit degrees, prefixed with E/W)
            </summary>
            <param name="deg">{number} deg - Degrees to be formatted as specified.</param>
            <param name="format">{string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.</param>
            <param name="separator">Item separator character - default a space</param>
            <param name="dPlaces">{number} [dp=0|2|4] - Number of double places to use – default 0 for dms, 2 for dm, 4 for d.</param>
            <returns>{string} Degrees formatted as deg/min/secs according to specified format.</returns>
        </member>
        <member name="M:CoordLib.Dms.ToBrng(System.Double,System.String,System.Char,System.Int32)">
            <summary>
            Converts numeric degrees to deg/min/sec as a bearing (0°..360°)
            </summary>
            <param name="deg">{number} deg - Degrees to be formatted as specified.</param>
            <param name="format">{string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.</param>
            <param name="separator">Item separator character - default a space</param>
            <param name="dPlaces">{number} [dp=0|2|4] - Number of double places to use – default 0 for dms, 2 for dm, 4 for d.</param>
            <returns>{string} Degrees formatted as deg/min/secs according to specified format.</returns>
        </member>
        <member name="M:CoordLib.Dms.CompassPoint(System.Double,System.Int32)">
            <summary>
            Returns compass point (to given precision) for supplied bearing.
                 * @example
                 * var point = Dms.compassPoint(24);    // point = 'NNE'
                 * var point = Dms.compassPoint( 24, 1 ); // point = 'N'
            </summary>
            <param name="bearing">{number} bearing - Bearing in degrees from north.</param>
            <param name="precision">{number} [precision=3] - Precision (1:cardinal / 2:intercardinal / 3:secondary-intercardinal).</param>
            <returns>{string} Compass point for supplied bearing.</returns>
        </member>
        <member name="T:CoordLib.Extensions.Extensions">
            <summary>
            CoordLib Extensions available via
            
              using CoordLib.Extensions;
              
            
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.IsValidLat(System.Double)">
            <summary>
            True for valid Latitudes (+-90°)
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.IsValidLon(System.Double)">
            <summary>
            True for valid Longitudes (+-180°)
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.ToRadians(System.Single)">
            <summary>
            Returns the angle in radians
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.ToDegrees(System.Single)">
            <summary>
            Returns the angle in Degrees
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.ToRadians(System.Double)">
            <summary>
            Returns the angle in radians
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.ToDegrees(System.Double)">
            <summary>
            Returns the angle in Degrees
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.Clip(System.Double,System.Double,System.Double)">
            <summary>
            Clips a number to the specified minimum and maximum values.
            Returns the clipped value
            </summary>
            <param name="_d"></param>
            <param name="minValue">Minimum allowable value.</param>
            <param name="maxValue">Maximum allowable value.</param>
            <returns>The clipped value.</returns>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.Clip(System.Single,System.Double,System.Double)">
            <summary>
            Clips a number to the specified minimum and maximum values.
            Returns the clipped value
            </summary>
            <param name="_i"></param>
            <param name="minValue">Minimum allowable value.</param>
            <param name="maxValue">Maximum allowable value.</param>
            <returns>The clipped value.</returns>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.Clip(System.Int32,System.Double,System.Double)">
            <summary>
            Clips a number to the specified minimum and maximum values.
            Returns the clipped value
            </summary>
            <param name="_i"></param>
            <param name="minValue">Minimum allowable value.</param>
            <param name="maxValue">Maximum allowable value.</param>
            <returns>The clipped value.</returns>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.Clip(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clips a number to the specified minimum and maximum values.
            Returns the clipped value
            </summary>
            <param name="_i"></param>
            <param name="minValue">Minimum allowable value.</param>
            <param name="maxValue">Maximum allowable value.</param>
            <returns>The clipped value.</returns>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.AsMapPixel(System.Drawing.Point)">
            <summary>
            Returns the Point as MapPixel Type
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.AsTileXY(System.Drawing.Point)">
            <summary>
            Returns a Point as TileXY Type
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.AsQuad(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns a Quad @ Zoom Level
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.AsQuadMax(CoordLib.LatLon)">
            <summary>
            Returns a Quad @ max Zoom Level
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.UtmZone(CoordLib.LatLon)">
            <summary>
            Returns the UtmZone Designator NNC 
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.UtmZoneNumber(CoordLib.LatLon)">
            <summary>
            Returns the UTM Longitude Zone Number
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.UtmZoneLetter(CoordLib.LatLon)">
            <summary>
            Returns the UTM Latitude Zone Letter
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.MagVarCalc_deg(CoordLib.LatLon)">
            <summary>
            Returns the Magnetic Variation (declinattion) at this location 
            using WMM2020 (valid 2020..2025)
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Extensions.MagVarLookup_deg(CoordLib.LatLon)">
            <summary>
            Returns the Magnetic Variation (declinattion) at this location 
            using the Lookup table/tree
            using WMM2020 (valid 2020..2025)
            </summary>
        </member>
        <member name="T:CoordLib.Geo">
            <summary>
            Geodetic functions
            A pool of static base functions
            
            Derived from 
            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
            Latitude/longitude spherical geodesy tools                         (c) Chris Veness 2002-2017  */
                                                                                              MIT Licence  */
            www.movable-type.co.uk/scripts/latlong.html                                                    */
            www.movable-type.co.uk/scripts/geodesy/docs/module-latlon-spherical.html                       */
            https://github.com/chrisveness/geodesy
            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
            </summary>
        </member>
        <member name="M:CoordLib.Geo.DistanceTo(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the distance from ‘this’ point to destination point (using haversine formula).
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pointLat">Latitude of destination point</param>
            <param name="pointLon">Longitude of destination point</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{number} Distance between this point and destination point, in same units as radius.</returns>
        </member>
        <member name="M:CoordLib.Geo.BearingTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the (initial) bearing from ‘this’ point to destination point.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pointLat">Latitude of destination point</param>
            <param name="pointLon">Longitude of destination point</param>
            <returns>{number} Initial bearing in degrees from north.</returns>
        </member>
        <member name="M:CoordLib.Geo.FinalBearingTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns final bearing arriving at destination destination point from ‘this’ point; the final bearing
            will differ from the initial bearing by varying degrees according to distance and latitude.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pointLat">Latitude of destination point</param>
            <param name="pointLon">Longitude of destination point</param>
            <returns>{number} Final bearing in degrees from north.</returns>
        </member>
        <member name="M:CoordLib.Geo.MidpointTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the midpoint between ‘this’ point and the supplied point.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pointLat">Latitude of destination point</param>
            <param name="pointLon">Longitude of destination point</param>
            <returns>Lat and Lon of the Mid point as array</returns>
        </member>
        <member name="M:CoordLib.Geo.IntermediatePointTo(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the point at given fraction between ‘this’ point and specified point.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pointLat">Latitude of destination point</param>
            <param name="pointLon">Longitude of destination point</param>
            <param name="fraction">{number} fraction - Fraction between the two points (0 = this point, 1 = specified point).</param>
            <returns>Lat and Lon of the intermediate point as array</returns>
        </member>
        <member name="M:CoordLib.Geo.DestinationPoint(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the destination point from ‘this’ point having travelled the given distance on the
            given initial bearing( bearing normally varies around path followed ).
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="distance">{number} distance - Distance travelled, in same units as earth radius (default: metres).</param>
            <param name="bearing">{number} bearing - Initial bearing in degrees from north.</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>Lat and Lon of the Destination point as array</returns>
        </member>
        <member name="M:CoordLib.Geo.Intersection(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the point of intersection of two paths defined by point and bearing.
            </summary>
            <param name="p1Lat">Latitude of First point</param>
            <param name="p1Lon">Longitude of First point</param>
            <param name="brng1">{number} brng1 - Initial bearing from first point.</param>
            <param name="p2Lat">Latitude of Second point</param>
            <param name="p2Lon">Longitude of Second point</param>
            <param name="brng2">{number} brng2 - Initial bearing from second point.</param>
            <returns>Lat and Lon of the Intersection point as array (null if no unique intersection defined)</returns>
        </member>
        <member name="M:CoordLib.Geo.CrossTrackDistanceTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns (signed) distance from ‘this’ point to great circle defined by start-point and end-point.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pStartLat">Latitude of Start point of great circle path</param>
            <param name="pStartLon">Longitude of Start point of great circle path</param>
            <param name="pEndLat">Latitude of End point of great circle path</param>
            <param name="pEndLon">Longitude of End point of great circle path</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{number} Distance to great circle (-ve if to left, +ve if to right of path).</returns>
        </member>
        <member name="M:CoordLib.Geo.AlongTrackDistanceTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns how far ‘this’ point is along a path from from start-point, heading towards end-point.
            That is, if a perpendicular is drawn from ‘this’ point to the( great circle ) path, the along-track
            distance is the distance from the start point to where the perpendicular crosses the path.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pStartLat">Latitude of Start point of great circle path</param>
            <param name="pStartLon">Longitude of Start point of great circle path</param>
            <param name="pEndLat">Latitude of End point of great circle path</param>
            <param name="pEndLon">Longitude of End point of great circle path</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{number} Distance along great circle to point nearest ‘this’ point.</returns>
        </member>
        <member name="M:CoordLib.Geo.MaxLatitude(System.Double,System.Double)">
            <summary>
            Returns maximum latitude reached when travelling on a great circle on given bearing from this
            point('Clairaut's formula'). Negate the result for the minimum latitude (in the Southern
            hemisphere).
            
            The maximum latitude is independent of longitude; it will be the same for all points on a given
            latitude.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="bearing">{number} bearing - Initial bearing.</param>
            <returns>maximum latitude reached</returns>
        </member>
        <member name="M:CoordLib.Geo.CrossingParallels(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the pair of meridians at which a great circle defined by two points crosses the given
            latitude.If the great circle doesn't reach the given latitude, null is returned.
            </summary>
            <param name="p1Lat">Latitude of First point defining great circle</param>
            <param name="p1Lon">Longitude of First point defining great circle</param>
            <param name="p2Lat">Latitude of Second point defining great circle</param>
            <param name="p2Lon">Longitude of Second point defining great circle</param>
            <param name="latitude">{number} latitude - Latitude crossings are to be determined for.</param>
            <returns>{Object|null} Object containing { lon1, lon2 } or null if given latitude not reached.</returns>
        </member>
        <member name="M:CoordLib.Geo.Towards(System.Double,System.Double)">
            <summary>
            Returns true if a track is towards a station at bearing
            </summary>
            <param name="bearing_deg">The bearing to the station</param>
            <param name="track_deg">The current track</param>
            <returns>True if towards, else false (going away from)</returns>
        </member>
        <member name="M:CoordLib.Geo.DirectionOf(System.Double,System.Double)">
            <summary>
            Returns the heads on direction of a station at bearing with regards of a track
            0 is straight ahead, neg. is left, pos. is right (+-180)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoordLib.Geo.Wrap90(System.Double)">
            <summary>
            Constrain degrees to range -90..+90 (for latitude); e.g. -91 => -89, 91 => 89.
            </summary>
            <param name="degrees">Latitude degrees</param>
            <returns>degrees within range -90..+90.</returns>
        </member>
        <member name="M:CoordLib.Geo.Wrap180(System.Double)">
            <summary>
            Constrain degrees to range -180..+180 (for longitude); e.g. -181 => 179, 181 => -179.
            </summary>
            <param name="degrees">Longitude degrees</param>
            <returns>degrees within range -180..+180.</returns>
        </member>
        <member name="M:CoordLib.Geo.Wrap360(System.Double)">
            <summary>
            Constrain degrees to range 0..360 (for bearings); e.g. -1 => 359, 361 => 1.
            </summary>
            <param name="degrees">Compass degrees (360°)</param>
            <returns>degrees within range 0..360.</returns>
        </member>
        <member name="M:CoordLib.Geo.Wrap360(System.Int32)">
            <summary>
            Constrain degrees to range 0..360 (for bearings); e.g. -1 => 359, 361 => 1.
            </summary>
            <param name="degrees">Compass degrees (360°)</param>
            <returns>degrees within range 0..360.</returns>
        </member>
        <member name="M:CoordLib.Geo.Wrap360avi(System.Double)">
            <summary>
            Constrain degrees to range >0..360 for Aviation use (for bearings)
            e.g. -1 => 359, 361 => 1 and 000 is returned as 360
            </summary>
            <param name="degrees">Compass degrees (360°)</param>
            <returns>degrees within range >0..360.</returns>
        </member>
        <member name="M:CoordLib.Geo.Wrap360avi(System.Int32)">
            <summary>
            Constrain degrees to range >0..360 for Aviation use (for bearings)
            e.g. -1 => 359, 361 => 1 and 000 is returned as 360
            </summary>
            <param name="degrees">Compass degrees</param>
            <returns>degrees within range 1..360.</returns>
        </member>
        <member name="T:CoordLib.LatLon">
            <summary>
            Implements a Lat, Lon point
            1:1 C# translation of functions from above
            Redesign to provide Static Functions with Lat/Lon doubles in Geo.XY
            and using them here for the LatLon Class
            
            Added Altitude for convenience
            Added UTM Zone resolution
            
            Changed to Struct (Aug 2033/BM)
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.Empty">
            <summary>
            Returns an Empty LatLon (Lat,Lon,Alt=NaN)
            </summary>
        </member>
        <member name="F:CoordLib.LatLon._lat">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="F:CoordLib.LatLon._lon">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="F:CoordLib.LatLon._altitude">
            <summary>
            Altitude above ellipsoid (meter preferred)
            Is set to 0 if not provided
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.Lat">
            <summary>
            Latitude part
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.Lon">
            <summary>
            Longitude part
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.Altitude">
            <summary>
            Altitude part metres above ellipsoid.
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.IsEmpty">
            <summary>
            True if Lat or Lon are not assigned
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.HasAltitude">
            <summary>
            True if Alt is set (not NaN)
            </summary>
        </member>
        <member name="M:CoordLib.LatLon.#ctor(System.Boolean)">
            <summary>
            Creates a LatLon point on the earth's surface at the specified latitude / longitude.
             initialized to 0/0/0
            </summary>
            <param name="initZero">Will init an 0/0/0 item if true (default) else it's Empty</param>
        </member>
        <member name="M:CoordLib.LatLon.#ctor(System.Double,System.Double)">
            <summary>
            Creates a LatLon point on the earth's surface at the specified latitude / longitude.
            </summary>
            <param name="lat"></param>
            <param name="lon"></param>
        </member>
        <member name="M:CoordLib.LatLon.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a LatLon point on the earth's surface at the specified latitude / longitude / altitude.
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="alt">Altitude above the ellipsoid</param>
        </member>
        <member name="M:CoordLib.LatLon.#ctor(System.Double[])">
            <summary>
            Creates a LatLon point on the earth's surface at the specified latitude / longitude.
            </summary>
            <param name="latLon"> Array of double where [0] = Lat, [1] = Lon, [2]= Alt (if provided)</param>
        </member>
        <member name="M:CoordLib.LatLon.#ctor(CoordLib.LatLon)">
            <summary>
            Creates a LatLon point on the earth's surface at the specified latitude / longitude.
              as copy of the given LatLon
            </summary>
            <param name="other">LatLon to copy from</param>
        </member>
        <member name="M:CoordLib.LatLon.SetAltitude(System.Double)">
            <summary>
            To set the Altitude on created objects
            </summary>
            <param name="alt">An altitude value</param>
        </member>
        <member name="M:CoordLib.LatLon.op_Equality(CoordLib.LatLon,CoordLib.LatLon)">
            <summary>
            Equality of a LatLon (lat, lon, alt)
            </summary>
        </member>
        <member name="M:CoordLib.LatLon.op_Inequality(CoordLib.LatLon,CoordLib.LatLon)">
            <summary>
            Inequality of a LatLon (lat, lon, alt)
            </summary>
        </member>
        <member name="M:CoordLib.LatLon.Equals(CoordLib.LatLon)">
            <summary>
            Checks if another point is equal to ‘this’ point.
            
                 * @example
                 *   var p1 = new LatLon( 52.205, 0.119 );
                 *   var p2 = new LatLon( 52.205, 0.119 );
                 *   var equal = p1.equals( p2 ); // true
            </summary>
            <param name="other">{LatLon} point - Point to be compared against this point.</param>
            <returns>{bool}   True if points are identical.</returns>
        </member>
        <member name="M:CoordLib.LatLon.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">An object</param>
        </member>
        <member name="M:CoordLib.LatLon.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
        </member>
        <member name="M:CoordLib.LatLon.CompareTo(CoordLib.LatLon)">
            <summary>
            Compare this with another LatLon
            Larger, Smaller decided on Latitude, then Longitude, then Altitude if set
            If this or the other is empty it returns 0
            </summary>
            <param name="other">The other LatLon</param>
            <returns>+1 if this is greater than the other,-1 if smaller and 0 if the same</returns>
        </member>
        <member name="M:CoordLib.LatLon.DistanceTo(CoordLib.LatLon,System.Double)">
            <summary>
            Returns the distance from ‘this’ point to destination point (using haversine formula).
                 * @example
                 *     var p1 = new LatLon( 52.205, 0.119 );
                 *     var p2 = new LatLon( 48.857, 2.351 );
                 *     var d = p1.distanceTo( p2 ); // 404.3 km
            </summary>
            <param name="point">{LatLon} point - Latitude/longitude of destination point</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{number} Distance between this point and destination point, in same units as radius.</returns>
        </member>
        <member name="M:CoordLib.LatLon.BearingTo(CoordLib.LatLon)">
            <summary>
            Returns the (initial) bearing from ‘this’ point to destination point.
            
                 * @example
                 *     var p1 = new LatLon( 52.205, 0.119 );
                 *     var p2 = new LatLon( 48.857, 2.351 );
                 *     var b1 = p1.bearingTo( p2 ); // 156.2°
            </summary>
            <param name="point">{LatLon} point - Latitude/longitude of destination point.</param>
            <returns>{number} Initial bearing in degrees from north.</returns>
        </member>
        <member name="M:CoordLib.LatLon.FinalBearingTo(CoordLib.LatLon)">
            <summary>
            Returns final bearing arriving at destination destination point from ‘this’ point; the final bearing
            will differ from the initial bearing by varying degrees according to distance and latitude.
            
                 * @example
                 *     var p1 = new LatLon( 52.205, 0.119 );
                 *     var p2 = new LatLon( 48.857, 2.351 );
                 *     var b2 = p1.finalBearingTo( p2 ); // 157.9°
            </summary>
            <param name="point">{LatLon} point - Latitude/longitude of destination point.</param>
            <returns>{number} Final bearing in degrees from north.</returns>
        </member>
        <member name="M:CoordLib.LatLon.MidpointTo(CoordLib.LatLon)">
            <summary>
            Returns the midpoint between ‘this’ point and the supplied point.
            
             * @example
             *     var p1 = new LatLon( 52.205, 0.119 );
             *     var p2 = new LatLon( 48.857, 2.351 );
             *     var pMid = p1.midpointTo( p2 ); // 50.5363°N, 001.2746°E
            </summary>
            <param name="point">{LatLon} point - Latitude/longitude of destination point.</param>
            <returns>{LatLon} Midpoint between this point and the supplied point.</returns>
        </member>
        <member name="M:CoordLib.LatLon.IntermediatePointTo(CoordLib.LatLon,System.Double)">
            <summary>
            Returns the point at given fraction between ‘this’ point and specified point.
            
                 * @example
                 *   let p1 = new LatLon( 52.205, 0.119 );
                 *   let p2 = new LatLon( 48.857, 2.351 );
                 *   let pMid = p1.intermediatePointTo( p2, 0.25 ); // 51.3721°N, 000.7073°E
            </summary>
            <param name="point">{LatLon} point - Latitude/longitude of destination point.</param>
            <param name="fraction">{number} fraction - Fraction between the two points (0 = this point, 1 = specified point).</param>
            <returns>{LatLon} Intermediate point between this point and destination point.</returns>
        </member>
        <member name="M:CoordLib.LatLon.DestinationPoint(System.Double,System.Double,System.Double)">
            <summary>
            Returns the destination point from ‘this’ point having travelled the given distance on the
            given initial bearing( bearing normally varies around path followed ).
            
                 * @example
                 *     var p1 = new LatLon( 51.4778, -0.0015 );
                 *     var p2 = p1.destinationPoint( 7794, 300.7 ); // 51.5135°N, 000.0983°W
            </summary>
            <param name="distance">{number} distance - Distance travelled, in same units as earth radius (default: metres).</param>
            <param name="bearing">{number} bearing - Initial bearing in degrees from north.</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{LatLon} Destination point.</returns>
        </member>
        <member name="M:CoordLib.LatLon.Intersection(CoordLib.LatLon,System.Double,CoordLib.LatLon,System.Double)">
            <summary>
            Returns the point of intersection of two paths defined by point and bearing.
            
                 * @example
                 *     var p1 = LatLon( 51.8853, 0.2545 ), brng1 = 108.547;
                 *     var p2 = LatLon( 49.0034, 2.5735 ), brng2 = 32.435;
                 *     var pInt = LatLon.intersection( p1, brng1, p2, brng2 ); // 50.9078°N, 004.5084°E
            </summary>
            <param name="p1">{LatLon} p1 - First point.</param>
            <param name="brng1">{number} brng1 - Initial bearing from first point.</param>
            <param name="p2">{LatLon} p2 - Second point.</param>
            <param name="brng2">{number} brng2 - Initial bearing from second point.</param>
            <returns>{LatLon|null} Destination point (null if no unique intersection defined).</returns>
        </member>
        <member name="M:CoordLib.LatLon.CrossTrackDistanceTo(CoordLib.LatLon,CoordLib.LatLon,System.Double)">
            <summary>
            Returns (signed) distance from ‘this’ point to great circle defined by start-point and end-point.
            
                 * @example
                 *   var pCurrent = new LatLon( 53.2611, -0.7972 );
                 *   var p1 = new LatLon( 53.3206, -1.7297 );
                 *   var p2 = new LatLon( 53.1887, 0.1334 );
                 *   var d = pCurrent.crossTrackDistanceTo( p1, p2 );  // -307.5 m
            </summary>
            <param name="pathStart">{LatLon} pathStart - Start point of great circle path.</param>
            <param name="pathEnd">{LatLon} pathEnd - End point of great circle path.</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{number} Distance to great circle (-ve if to left, +ve if to right of path).</returns>
        </member>
        <member name="M:CoordLib.LatLon.AlongTrackDistanceTo(CoordLib.LatLon,CoordLib.LatLon,System.Double)">
            <summary>
            Returns how far ‘this’ point is along a path from from start-point, heading towards end-point.
            That is, if a perpendicular is drawn from ‘this’ point to the( great circle ) path, the along-track
            distance is the distance from the start point to where the perpendicular crosses the path.
            
                 * @example
                 *   var pCurrent = new LatLon( 53.2611, -0.7972 );
                 *   var p1 = new LatLon( 53.3206, -1.7297 );
                 *   var p2 = new LatLon( 53.1887, 0.1334 );
                 *   var d = pCurrent.alongTrackDistanceTo( p1, p2 );  // 62.331 km
            </summary>
            <param name="pathStart">{LatLon} pathStart - Start point of great circle path.</param>
            <param name="pathEnd">{LatLon} pathEnd - End point of great circle path.</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{number} Distance along great circle to point nearest ‘this’ point.</returns>
        </member>
        <member name="M:CoordLib.LatLon.MaxLatitude(System.Double)">
            <summary>
            Returns maximum latitude reached when travelling on a great circle on given bearing from this
            point('Clairaut's formula'). Negate the result for the minimum latitude (in the Southern
            hemisphere).
            
            The maximum latitude is independent of longitude; it will be the same for all points on a given
            latitude.
            </summary>
            <param name="bearing">{number} bearing - Initial bearing.</param>
            <returns>maximum latitude reached</returns>
        </member>
        <member name="M:CoordLib.LatLon.CrossingParallels(CoordLib.LatLon,CoordLib.LatLon,System.Double)">
            <summary>
            Returns the pair of meridians at which a great circle defined by two points crosses the given
            latitude.If the great circle doesn't reach the given latitude, null is returned.
            </summary>
            <param name="point1">{LatLon} point1 - First point defining great circle.</param>
            <param name="point2">{LatLon} point2 - Second point defining great circle.</param>
            <param name="latitude">{number} latitude - Latitude crossings are to be determined for.</param>
            <returns>{Object|null} Object containing { lon1, lon2 } or null if given latitude not reached.</returns>
        </member>
        <member name="M:CoordLib.LatLon.ToRouteCoord(System.String)">
            <summary>
            Converts this LatLon to a Route COORD string 
            DDMM[SS]{N|S}DDDMM[SS]{E|W} 0..89°59'59" N/S 0..180°00'00" E/W
            </summary>
            <param name="format">{string} [format=dm] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.</param>
            <returns>A coord string</returns>
        </member>
        <member name="M:CoordLib.LatLon.ToString(System.String,System.Char,System.Int32)">
            <summary>
            Returns a string representation of ‘this’ point, formatted as degrees, degrees+minutes, or
            degrees+minutes+seconds.
            </summary>
            <param name="format">{string} [format=dms] - Format point as 'd', 'dm', 'dms'.</param>
            <param name="separator">Item separator character - default a space</param>
            <param name="dp">{number} [dp=0|2|4] - Number of decimal places to use - default 0 for dms, 2 for dm, 4 for d.</param>
            <returns>{string} Comma-separated latitude/longitude.</returns>
        </member>
        <member name="M:CoordLib.LatLon.ToString">
            <summary>
            Returns the default string representation 
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:CoordLib.LatLon.#ctor(System.String)">
            <summary>
            Create a LatLon from a Serializer String
            </summary>
            <param name="serString">Serialized string</param>
        </member>
        <member name="M:CoordLib.LatLon.ToSerString">
            <summary>
            Provide A serializer string
            </summary>
        </member>
        <member name="T:CoordLib.LLA">
            <summary>
            Handle MS FSim LLA items
            
            N9° 44' 31.60",E118° 45' 31.51",+000045.00
            </summary>
        </member>
        <member name="M:CoordLib.LLA.ToLL(System.Double,System.Double)">
            <summary>
            Convert from values to an LL string
              N9° 44' 31.60",E118° 45' 31.51"
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <returns>An LL string</returns>
        </member>
        <member name="M:CoordLib.LLA.ToLLA(System.Double,System.Double,System.Double)">
            <summary>
            Convert from values to an LLA string
              N9° 44' 31.60",E118° 45' 31.51",+000045.00
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="alt">Altitude (must be in meters for FSim use)</param>
            <returns>An LLA string</returns>
        </member>
        <member name="M:CoordLib.LLA.TryParseLL(System.String,System.Double@,System.Double@)">
            <summary>
            Converts the string from an LL to its double values or returns false
            </summary>
            <param name="ll">An LL string</param>
            <param name="lat">out Lat</param>
            <param name="lon">out Lon</param>
            <returns>True if successfull</returns>
        </member>
        <member name="M:CoordLib.LLA.TryParseLLA(System.String,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts the string from an LLA to its double values or returns false
            </summary>
            <param name="lla">An LLA string</param>
            <param name="lat">out Lat</param>
            <param name="lon">out Lon</param>
            <param name="alt">out Alt</param>
            <returns>True if successfull</returns>
        </member>
        <member name="T:CoordLib.LLShapes.LLPoint">
            <summary>
            Point Struct with LatLon items as Points
            Note: Math operations are performed on the numbers and not in any particular projection
            </summary>
        </member>
        <member name="F:CoordLib.LLShapes.LLPoint.Empty">
            <summary>
            Represents a Point that has X and Y values set to zero.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Point struct with the specified coordinates.
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.#ctor(CoordLib.LatLon)">
            <summary>
            Initializes a new instance of the Point struct with the specified LatLon obj
            </summary>
            <param name="latLon">A LatLon Item</param>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.AsLatLon">
            <summary>
            Returns the Point as LatLon Type
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLPoint.IsEmpty">
            <summary>
            returns true if coordinates wasn't assigned
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLPoint.Lat">
            <summary>
            Latitude of this Point
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLPoint.Lon">
            <summary>
            Longitude of this Point
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.op_Explicit(CoordLib.LLShapes.LLPoint)~CoordLib.LatLon">
            <summary>
            Returns the Point as LatLon Type
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.op_Addition(CoordLib.LLShapes.LLPoint,CoordLib.LLShapes.LLSize)">
            <summary>
            Translates a Point by a given Size.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.op_Subtraction(CoordLib.LLShapes.LLPoint,CoordLib.LLShapes.LLSize)">
            <summary>
            Translates a Point by the negative of a given Size.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.op_Subtraction(CoordLib.LLShapes.LLPoint,CoordLib.LLShapes.LLPoint)">
            <summary>
            Translates a Point by the negative of a given Point
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.op_Equality(CoordLib.LLShapes.LLPoint,CoordLib.LLShapes.LLPoint)">
            <summary>
            Compares two Point objects. The result specifies whether the values of the X and Y properties of the two Point objects are equal.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.op_Inequality(CoordLib.LLShapes.LLPoint,CoordLib.LLShapes.LLPoint)">
            <summary>
            Compares two Point objects. The result specifies whether the values of the X or Y properties of the two Point objects are unequal.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.Add(CoordLib.LLShapes.LLPoint,CoordLib.LLShapes.LLSize)">
            <summary>
            Adds the specified Size to the specified Point.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.Subtract(CoordLib.LLShapes.LLPoint,CoordLib.LLShapes.LLSize)">
            <summary>
            Returns the result of subtracting specified Size from the specified Point.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.Equals(System.Object)">
            <summary>
            Specifies whether this point instance contains the same coordinates as the specified object.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.Offset(CoordLib.LLShapes.LLPoint)">
            <summary>
            Translates this Point by the specified Point.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.Offset(System.Double,System.Double)">
            <summary>
            Translates this Point by the specified amount.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.GetHashCode">
            <summary>
            Returns a hash code for this Point.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLPoint.ToString">
            <summary>
            Converts this Point to a human-readable string.
            </summary>
        </member>
        <member name="T:CoordLib.LLShapes.LLRectangle">
            <summary>
            Rectangle made from LatLon Coordinate Items
            Note: Math operations are performed on the numbers and not in any particular projection
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.#cctor">
            <summary>
            static cTor: init empty field
            </summary>
        </member>
        <member name="F:CoordLib.LLShapes.LLRectangle.Empty">
            <summary>
            Represents a Rectangle structure with its properties left uninitialized.
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.Lon">
            <summary>
            Longitude (X) Part
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.Lat">
            <summary>
            Latitude (Y) Part
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.WidthLon">
            <summary>
            Radial Distance as angle (deg)
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.HeightLat">
            <summary>
            Radial Distance as angle (deg)
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.IsEmpty">
            <summary>
            Returns true if coordinates are not assigned
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.#ctor(System.Boolean)">
            <summary>
            cTor: Empty (init as Empty)
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            cTor: from valued
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.#ctor(CoordLib.LLShapes.LLPoint,CoordLib.LLShapes.LLSize)">
            <summary>
            cTor: from point and size
            </summary>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns an LLRectangle from Left,Top,Right,Bottom points
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.LocationTopLeft">
            <summary>
            TopLeft Point
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.LocationRightBottom">
            <summary>
            Right Bottom Point
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.LocationMiddle">
            <summary>
            Center Point
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.Size">
            <summary>
            Gets or sets the size of this Rectangle.
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.Left">
            <summary>
            Left (Longitude)
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.Top">
            <summary>
            Top (Latitude)
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.Right">
            <summary>
            Right (Lon + WidthDeg)
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLRectangle.Bottom">
            <summary>
            Bottom (Lat-Height)
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.Equals(System.Object)">
            <summary>
            Tests whether obj is a Rectangle structure with the same location and size of this Rectangle structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.op_Equality(CoordLib.LLShapes.LLRectangle,CoordLib.LLShapes.LLRectangle)">
            <summary>
            Equality: Tests whether two Rectangle structures have equal location and size.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.op_Inequality(CoordLib.LLShapes.LLRectangle,CoordLib.LLShapes.LLRectangle)">
            <summary>
            Inequality: Tests whether two Rectangle structures differ in location or size.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.Contains(System.Double,System.Double)">
            <summary>
            Determines if the specified point is contained within this Rectangle structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.Contains(CoordLib.LLShapes.LLPoint)">
            <summary>
            Determines if the specified point is contained within this Rectangle structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.Contains(CoordLib.LLShapes.LLRectangle)">
            <summary>
            Determines if the rectangular region represented by rect is entirely contained within this Rectangle structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.GetHashCode">
            <summary>
            Returns the hash code for this Rectangle structure. For information about the use of hash codes, see GetHashCode() .
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.Offset(CoordLib.LLShapes.LLPoint)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.Offset(System.Double,System.Double)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLRectangle.ToString">
            <summary>
            Converts the attributes of this Rectangle to a human-readable string.
            </summary>
        </member>
        <member name="T:CoordLib.LLShapes.LLSize">
            <summary>
            Size Struct with LatLon items as Points
            Note: Math operations are performed on the numbers and not in any particular projection
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.#cctor">
            <summary>
            static cTor:
            </summary>
        </member>
        <member name="F:CoordLib.LLShapes.LLSize.Empty">
            <summary>
            An Empty LLSize
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLSize.IsEmpty">
            <summary>
            Get: true if it is empty (Height and Width value of 0)
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLSize.WidthLon">
            <summary>
            Width or Longitude degrees
            </summary>
        </member>
        <member name="P:CoordLib.LLShapes.LLSize.HeightLat">
            <summary>
            Height or Latitude degrees
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.#ctor(System.Boolean)">
            <summary>
            cTor: empty (will always init with 0 Values
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.#ctor(CoordLib.LLShapes.LLSize)">
            <summary>
            cTor: copy
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.#ctor(CoordLib.LLShapes.LLPoint)">
            <summary>
            cTor: From LLPoint values
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.#ctor(System.Double,System.Double)">
            <summary>
            cTor: from height (latitude) and width (longitude) as coordinates [deg]
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.op_Addition(CoordLib.LLShapes.LLSize,CoordLib.LLShapes.LLSize)">
            <summary>
            Addition: Adds the width and height of one Size structure to the width and height of another Size structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.op_Subtraction(CoordLib.LLShapes.LLSize,CoordLib.LLShapes.LLSize)">
            <summary>
            Subtraction: Subtracts the width and height of one Size structure from the width and height of another Size structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.op_Equality(CoordLib.LLShapes.LLSize,CoordLib.LLShapes.LLSize)">
            <summary>
            Equality: Tests whether two Size structures are equal.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.op_Inequality(CoordLib.LLShapes.LLSize,CoordLib.LLShapes.LLSize)">
            <summary>
            Inequality: Tests whether two Size structures are different.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.op_Explicit(CoordLib.LLShapes.LLSize)~CoordLib.LLShapes.LLPoint">
            <summary>
            Conversion: Returns an LLPoint from the values (X=Height,Lat / Y=Width,Lon)
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.Add(CoordLib.LLShapes.LLSize,CoordLib.LLShapes.LLSize)">
            <summary>
            Adds the width and height of one Size structure to the width and height of another Size structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.Subtract(CoordLib.LLShapes.LLSize,CoordLib.LLShapes.LLSize)">
            <summary>
            Subtracts the width and height of one Size structure from the width and height of another Size structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a Size structure with the same dimensions as this Size structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.GetHashCode">
            <summary>
            Returns a hash code for this Size structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.ToLLPoint">
            <summary>
            Returns the Values as LLPoint Struct
            </summary>
        </member>
        <member name="M:CoordLib.LLShapes.LLSize.ToString">
            <summary>
            Creates a human-readable string that represents this Size structure.
            </summary>
        </member>
        <member name="T:CoordLib.MercatorTiles.MapPixel">
            <summary>
            A MapPixel for Mercator Tile Projections
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.MapPixel.Empty">
            <summary>
            An emtpy (unusable) MapPixel at -1/-1
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.LatLonToMapPixel(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns the MapPixel for a coordinate on the tile at zoom level
            </summary>
            <param name="latLon,,">A coordinate</param>
            <param name="zoom">A zoomlevel</param>
            <returns>The MapPixel for the coordiate</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.LatLonToMapPixel(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns the MapPixel for a coordinate on the tile at zoom level
            </summary>
            <param name="lat,,">Latitude</param>
            <param name="lon,,">Longitude</param>
            <param name="zoom">A zoomlevel</param>
            <returns>The MapPixel for the coordiate</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.#ctor(System.Int32,System.Int32)">
            <summary>
            cTor: From X,Y
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.#ctor(CoordLib.MercatorTiles.MapPixel)">
            <summary>
            cTor: Copy constructor
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.#ctor(System.Drawing.Point)">
            <summary>
            cTor: From a Point
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.#ctor(CoordLib.LatLon,System.UInt16)">
            <summary>
            cTor: From LatLon at Zoom Level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.#ctor(System.Double,System.Double,System.UInt16)">
            <summary>
            cTor: From Latitude, Longitude at Zoom Level
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.MapPixel.X">
            <summary>
            The MapPixel X value
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.MapPixel.Y">
            <summary>
            The MapPixel Y value
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.AsPoint">
            <summary>
            Returns the MapPixel as Point
            </summary>
            <returns>A Point</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.op_Equality(CoordLib.MercatorTiles.MapPixel,CoordLib.MercatorTiles.MapPixel)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.op_Inequality(CoordLib.MercatorTiles.MapPixel,CoordLib.MercatorTiles.MapPixel)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.Equals(System.Object)">
            <summary>
            Equality towads another object
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.GetHashCode">
            <summary>
            Returns a Hashcode for this object
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.Offset(System.Int32,System.Int32)">
            <summary>
            Translates this MapPixel by the specified amount
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.ToTileXY">
            <summary>
            Tile coordinate from MapPixel coordinates
            </summary>
            <returns>A TileXY</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.Quadrant">
            <summary>
            Returns the Quadrant on a Tile where a MapPixel lies
            </summary>
            <returns>A Quadrant</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.ToLatLon(System.UInt16)">
            <summary>
            Get lat/lon coordinates from pixel coordinates
            </summary>
            <param name="zoom">A zoom level</param>
            <returns>A Coordinate</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.Resolution_m(System.UInt16)">
            <summary>
            Returns resolution of this pixel at a zoom level in meters
            - square pixels i.e. both sides have the same Resolution
            </summary>
            <param name="zoom"></param>
            <returns>Meters</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.Size_m(System.UInt16)">
            <summary>
            Returns SizeF of this pixel at a zoom level in meters
            </summary>
            <param name="zoom"></param>
            <returns>A SizeF in meters</returns>
        </member>
        <member name="T:CoordLib.MercatorTiles.Projection">
            <summary>
            Web Mercator projection  for Tile based items
            
            The projection covers the Earth from −180° to 180° longitude, and 85.05° north and south. 
            
            https://en.wikipedia.org/wiki/Web_Mercator_projection
            
            PROJCRS["WGS 84 / Pseudo-Mercator",
               BASEGEOGCRS["WGS 84",
                   ENSEMBLE["World Geodetic System 1984 ensemble",
                       MEMBER["World Geodetic System 1984 (Transit)", ID["EPSG",1166]],
                       MEMBER["World Geodetic System 1984 (G730)",    ID["EPSG",1152]],
                       MEMBER["World Geodetic System 1984 (G873)",    ID["EPSG",1153]],
                       MEMBER["World Geodetic System 1984 (G1150)",   ID["EPSG",1154]],
                       MEMBER["World Geodetic System 1984 (G1674)",   ID["EPSG",1155]],
                       MEMBER["World Geodetic System 1984 (G1762)",   ID["EPSG",1156]],
                       MEMBER["World Geodetic System 1984 (G2139)",   ID["EPSG",1309]],
                       ELLIPSOID["WGS 84", 6378137, 298.257223563, LENGTHUNIT["metre", 1, ID["EPSG",9001]], ID["EPSG",7030]],
                       ENSEMBLEACCURACY[2], ID["EPSG",6326]],
                   ID["EPSG",4326]],
               CONVERSION["Popular Visualisation Pseudo-Mercator",
                   METHOD["Popular Visualisation Pseudo Mercator", ID["EPSG",1024]],
                   PARAMETER["Latitude of natural origin",  0, ANGLEUNIT["degree", 0.0174532925199433, ID["EPSG",9102]], ID["EPSG",8801]],
                   PARAMETER["Longitude of natural origin", 0, ANGLEUNIT["degree", 0.0174532925199433, ID["EPSG",9102]], ID["EPSG",8802]],
                   PARAMETER["False easting",               0, LENGTHUNIT["metre", 1,                  ID["EPSG",9001]], ID["EPSG",8806]],
                   PARAMETER["False northing",              0, LENGTHUNIT["metre", 1,                  ID["EPSG",9001]], ID["EPSG",8807]],
                   ID["EPSG",3856]],
               CS[Cartesian, 2, ID["EPSG",4499]],
               AXIS["Easting (X)", east],
               AXIS["Northing (Y)", north],
               LENGTHUNIT["metre", 1, ID["EPSG",9001]],
               ID["EPSG",3857]]
            </summary>
        </member>
        <member name="F:CoordLib.MercatorTiles.Projection.MinLatitude">
            <summary>
            Minimum Latitude (limited around the S-Pole)
            </summary>
        </member>
        <member name="F:CoordLib.MercatorTiles.Projection.MaxLatitude">
            <summary>
            Maximum Latitude (limited around the N-Pole)
            </summary>
        </member>
        <member name="F:CoordLib.MercatorTiles.Projection.MinLongitude">
            <summary>
            Minimum Longitude
            </summary>
        </member>
        <member name="F:CoordLib.MercatorTiles.Projection.MaxLongitude">
            <summary>
            Maximum Longitude
            </summary>
        </member>
        <member name="F:CoordLib.MercatorTiles.Projection.MinZoom">
            <summary>
            Minimum ZoomLevel
            </summary>
        </member>
        <member name="F:CoordLib.MercatorTiles.Projection.MaxZoom">
            <summary>
            Maximum ZoomLevel
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.Projection.TileSize">
            <summary>
            Size of tile
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.Projection.Axis">
            <summary>
            Semi-major axis of ellipsoid, in meters
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.Projection.Flattening">
            <summary>
            Flattening of ellipsoid
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapMinTileXY(System.UInt16)">
            <summary>
            Min. tile in tiles at custom zoom level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapMaxTileXY(System.UInt16)">
            <summary>
            Max. tile in tiles at custom zoom level
            </summary>
            <param name="zoom">A zoom level</param>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapSizeTileXY(System.UInt16)">
            <summary>
            Gets whole Map size in TileXY units
            </summary>
            <param name="zoom">A zoom level</param>
            <returns>A Size of [TileXY]</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapPixelSize(System.UInt16)">
            <summary>
            Returns MapPixel Size of the whole Map at zoom level
            </summary>
            <param name="zoom">A zoom level</param>
            <returns>Size of MapPixels</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapResolution_mPerPixel(System.UInt16,System.Double)">
            <summary>
            The resolution in meters of a single pixel at a Latitude
            </summary>
            <param name="zoom">A zoom level</param>
            <param name="latitude">Latitude degrees</param>
            <returns>Meters</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapResolution_mPerTile(System.UInt16,System.Double)">
            <summary>
            The resolution in meters of a single Tile at a Latitude
            </summary>
            <param name="zoom">A zoom level</param>
            <param name="latitude">Latitude degrees</param>
            <returns>Meters</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.LatLonToMapPixel(System.Double,System.Double,System.UInt16)">
            <summary>
            Get pixel coordinates from lat/lon as Mercator Projection
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapPixelToLatLon(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Gets lat/lon coordinates from pixel coordinates
            </summary>
        </member>
        <member name="T:CoordLib.MercatorTiles.Quad">
            <summary>
            Quad Tree Item
            Based on the Mercator Projection Grid with a Quad Square Tile of 256x256
            see also: https://docs.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system
            
            The Quad at a ZoomLevel 1..22 is composed of digits base4 (0,1,2,3) other digits or characters are invalid
            Min Zoom is 1; Max Zoom is 22
            Note: a Quad which is empty (ZoomLevel 0) would represent the entire map 
            
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.Quad.Empty">
            <summary>
            An empty quad
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.LatLonToQuad(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns a Quad from a coordinate at zoom
            </summary>
            <param name="latLon">Coordinate</param>
            <param name="zoom">Zoomlevel</param>
            <returns>A Quadkey as String</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.LatLonToQuad(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns a Quad from a coordinate at zoom
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="zoom">Zoomlevel</param>
            <returns>A Quadkey as String</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Around(CoordLib.MercatorTiles.Quad)">
            <summary>
            Returns 4 Quads that are the closest neighbours of the argument
            assuming the argument represents a left,top entity
            the returned ones are then the ones to the left and above
            </summary>
            <param name="quad">A Quad</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Around4(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns 4 Quads that are the closest neighbours of the argument
            including the one that includes the argument
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Around4(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns 4 Quads that are the closest neighbours of the argument
            including the one that includes the argument
            </summary>
            <param name="latLon">A LatLon</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Around9(CoordLib.MercatorTiles.Quad)">
            <summary>
            Returns 8 surounding Quad of the argument + the argument as center [0]
            </summary>
            <param name="quad">A QuadKey at zoom</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Around9(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns 8 surounding Quad of the argument + the argument as center [0]
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Around9(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns 8 surounding Quad of the argument + the argument as center [0]
            </summary>
            <param name="latLon">A LatLon</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Around49EX(CoordLib.MercatorTiles.Quad)">
            <summary>
            Very dedicated use in Map Displays of 7x7 Tile Maps
             (it returns essentially a 8x8 Tile Map)
            Intended to return a Quadlist to lookup items for such a Map.
            It would need to lookup items in 49 Quads to complete all on this Map.
            
            It returns however only 15 surounding Quads of the argument + the argument as center [0]
            Instead of returning 49 quads it will reduce the zoom out by one level and return
            the surounding ones + extending on the short side
            results in an overflow of 15 original zoom quad areas 
            but saves to scan 49 items (i.e. 34 less)
            </summary>
            <param name="quad">A Quad at  original zoom</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.#ctor(System.String)">
            <summary>
            cTor: Initialize from string (beware, no validity checks are made 
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.#ctor(CoordLib.MercatorTiles.Quad)">
            <summary>
            cTor: As copy of the argument
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.#ctor(CoordLib.LatLon,System.UInt16)">
            <summary>
            cTor: From a LatLon coordinate at a zoom level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.#ctor(System.Double,System.Double,System.UInt16)">
            <summary>
            cTor: From a Latitude, Longitude coordinate at a zoom level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.#ctor(System.Drawing.Point,System.UInt16)">
            <summary>
            cTor: From a TileXY coordinate at a zoom level
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.Quad.IsEmpty">
            <summary>
            True for an Empty Quad
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.ToString">
            <summary>
            Returns the string representation
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.AtZoom(System.UInt16)">
            <summary>
            Returns a reduced Quad at the desired zoom
            If reduction not possible it returns the argument
            </summary>
            <param name="zoom">Zoomlevel</param>
            <returns>A Quad</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Center">
            <summary>
            Returns the Center Coord of a Quad
            </summary>
            <returns>The Center Coordinate of this Quad</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Includes(CoordLib.MercatorTiles.Quad)">
            <summary>
            True if the argument Quad is included in this Quad
            Implies that the argument is at the same or a higher zoom level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.IsPartOf(CoordLib.MercatorTiles.Quad)">
            <summary>
            True if this Quad is part of the argument
            Implies that the argument is at the same or a lower zoom level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.op_Equality(CoordLib.MercatorTiles.Quad,CoordLib.MercatorTiles.Quad)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.op_Inequality(CoordLib.MercatorTiles.Quad,CoordLib.MercatorTiles.Quad)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Equals(System.Object)">
            <summary>
            Equality towads another object
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.GetHashCode">
            <summary>
            Returns a Hashcode for this object
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.Quad.ZoomLevel">
            <summary>
            returns the ZoomLevel of this Quad
            Note: ZoomLevel 0 means an empty Quad.
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.HigherLevel">
            <summary>
            Returns the QuadKey of the zoomed out level of the argument
            can resolve in an empty string which is not really a Quad anymore
            </summary>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.LastQ">
            <summary>
            Returns the rightmost Quad Item (character)
            can resolve in an empty string which is not really a Quad cahr anymore
            </summary>
            <returns>The rightmost Quad Digit as string</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.LeftQ">
            <summary>
            Get the QuadKey left of the current one
            </summary>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.RightQ">
            <summary>
            Get the QuadKey right of the current one
            </summary>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.AboveQ">
            <summary>
            Get the QuadKey above of the current one
            </summary>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.BelowQ">
            <summary>
            Get the QuadKey below of the current one
            </summary>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Around">
            <summary>
            Returns 4 Quads that are the closest neighbours of this quad
            assuming this quad represents a left,top entity
            the returned ones are then the ones to the left and above
            </summary>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Around9">
            <summary>
            Returns 8 surounding Quad of this quad + this quad as center [0]
            </summary>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Around49EX">
            <summary>
            Very dedicated use in Map Displays of 7x7 Tile Maps
             (it returns essentially a 8x8 Tile Map)
            Intended to return a Quadlist to lookup items for such a Map.
            It would need to lookup items in 49 Quads to complete all on this Map.
            
            It returns however only 15 surounding Quads of this quad + this quad as center [0]
            Instead of returning 49 quads it will reduce the zoom out by one level and return
            the surounding ones + extending on the short side
            results in an overflow of 15 original zoom quad areas 
            but saves to scan 49 items (i.e. 34 less)
            </summary>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="T:CoordLib.MercatorTiles.QuadLookup`1">
            <summary>
            Lookup tree for Quad tagged items
            
             The lookup is defined by the minimum and maximum zoom level and the branch limit
             
             Mimimum zoom omits traversing the first levels on the cost of searching the first
             entry point by the number of items of this level (max - see comment below)
             i.e. starting at L4 would result in a maximum of 256 entry points which need to 
             be found by a linear albeit indexed search (Dictionary Key lookup)
             
             The tree will expand to a next level when the max number of leave items (branch limit) is exceeded
             except if we have reached the maximum zoom, there all items will be stored regardless
             of its count.
             
             Geo features are seldom distributed evenly accross the globe
              so the tree will never be a balanced one
              hence a deeper level than the anticipated max number of items
              would suggest is needed in order to balance the linear search at 
              the end element versus another level of depth
            
             Quads are base4 items
             L1           4
             L2          16
             L3          64
             L4         256
             L5       1'024
             L6       4'096
             L7      16'384
             L8      65'536
             L9     262'144
             L10  1'048'576
             L11  4'194'304
             L12 16'777'216
             L13 67'108'864
             Ln       4^n
             
            From testing the complete MSFS Aiport DB (~40'677 items Added and ~22'612 PartOf Querys at zoom 12 to find an Airport)
            with a QLookup(3,11,  32) will reach maximum depth at L11 / Add:  0.68% PartOf: 0.53% - TOT 1.21% CPU time
            with a QLookup(3,10,  64) will reach maximum depth at L10 / Add:  0.69% PartOf: 0.67% - TOT 1.36% CPU time
            with a QLookup(3,10, 128) will reach maximum depth at L9  / Add:  0.63% PartOf: 0.98% - TOT 1.61% CPU time
            with a QLookup(3,10, 256) will reach maximum depth at L9  / Add:  0.61% PartOf: 1.61% - TOT 2.22% CPU time
            with a QLookup(3,10, 512) will reach maximum depth at L8  / Add:  0.43% PartOf: 2.28% - TOT 2.71% CPU time
            with a QLookup(3,10,1024) will reach maximum depth at L7  / Add:  0.37% PartOf: 4.89% - TOT 5.26% CPU time
            
            ~450 kByte was allocated for the Lookup Tables 
              each Item record contains a quad string of 22 chars + Airport reference
              + Level Dictionary overhead
            
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.QuadLookup`1.Count">
            <summary>
            Returns the number of items stored
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.QuadLookup`1.MaxLevel">
            <summary>
            Returns the maximum zoom level used
            </summary>
        </member>
        <member name="T:CoordLib.MercatorTiles.QuadLookup`1.LookupItem">
            <summary>
            A lookup item
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadLookup`1.QLevel.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a Tree up to Max with Step increments to the next level
             e.g. start 1, max 5, step 2 -> 1,3,5 
            </summary>
            <param name="thisZoom">Zoom for this level</param>
            <param name="maxZoom">MaxZoom where content is stored</param>
            <param name="branchLimit">Max number of items in intermediate branches (MaxZoom..4^MaxZoom)</param>
        </member>
        <member name="P:CoordLib.MercatorTiles.QuadLookup`1.QLevel.Items">
            <summary>
            Return ALL items know to this Level
            which includes all sublevels
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadLookup`1.QLevel.Add(CoordLib.MercatorTiles.Quad,`0)">
            <summary>
            Add an item based on a Quad
            </summary>
            <param name="quad">Quad tag</param>
            <param name="item">The item to store</param>
            <returns>The zoom level where the item was stored</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadLookup`1.QLevel.GetItemsWhichArePartOf(CoordLib.MercatorTiles.Quad)">
            <summary>
            Attempts to retrieve items that are part of the argument
            Implies that the argument is at a lower or equal level than the maxZoom of the tree
            </summary>
            <param name="queryQ">A Quad, cannot be more detailed than the MaxZoom</param>
            <returns>A list of items</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadLookup`1.QLevel.GetItemWhichIncludes(CoordLib.MercatorTiles.Quad)">
            <summary>
            Attempts to return an item where the argument is included
            Implies that the argument is at a higher or equal zoom level than the maxZoom of the tree
            </summary>
            <param name="queryQ">A Quad, must be more detailed than the MaxZoom</param>
            <returns>An Item that includes the query Quad or null</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadLookup`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a Tree from Min up to Max zoom levels
            </summary>
            <param name="startZoom">Zoom for this level (1..Projection.MaxZoom) </param>
            <param name="maxZoom">MaxZoom where content is stored (1..Projection.MaxZoom)</param>
            <param name="branchLimit">Max number of items in intermediate branches (MaxZoom..4^MaxZoom)</param>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadLookup`1.Add(CoordLib.MercatorTiles.Quad,`0)">
            <summary>
            Add an item based on a Quad
            NOTE: the Quad depth (zoom level) must be >= MaxZoom of the tree - will throw an ArgumentException
            </summary>
            <param name="quad">Quad tag</param>
            <param name="itemRef">The item to store, must be a class (ref only)</param>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadLookup`1.GetItemsWhichArePartOf(CoordLib.MercatorTiles.Quad)">
            <summary>
            Attempts to retrieve items that are part of the argument
            Implies that the argument is at a lower or equal level than the maxZoom of the tree
            </summary>
            <param name="queryQ">A Quad, cannot be more detailed than the MaxZoom</param>
            <returns>A list of items</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadLookup`1.GetItemWhichIncludes(CoordLib.MercatorTiles.Quad)">
            <summary>
            Attempts to return a list of items where the argument is included
            Implies that the argument is at a higher or equal zoom level than the maxZoom of the tree
            </summary>
            <param name="queryQ">A Quad, must be more detailed than the MaxZoom</param>
            <returns>An Item that includes the query Quad or null</returns>
        </member>
        <member name="T:CoordLib.MercatorTiles.QuadOp">
            <summary>
            Internal Quad Tree Helper based on:
              Quad strings as in/output (quadKey)
              Zoom is always ushort
            
            Based on the Mercator Projection Grid with a Quad Square Tile of 256x256
            see also: https://docs.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system
             
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.CheckQuad(System.String)">
            <summary>
            Checks a Quad for validity
            </summary>
            <param name="quadKey">A Quad string</param>
            <returns>True if valid</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.ZoomLevel(System.String)">
            <summary>
            returns the ZoomLevel of the argument
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.QuadAtZoom(System.String,System.UInt16)">
            <summary>
            Returns a reduced Quad at the desired zoom
            If reduction not possible it returns the argument
            </summary>
            <param name="quadKey">A quadKey</param>
            <param name="zoom">Zoomlevel 1..23 </param>
            <returns>A Quad Key (empty if zoom=0)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.LatLonToQuad(CoordLib.LatLon,System.UInt16)">
            <summary>
            Converts a LatLon @zoom into a Quad and returns a QuadKey as String
            </summary>
            <param name="latLon">Coordinate</param>
            <param name="zoom">Zoomlevel</param>
            <returns>A QuadKey as String</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.LatLonToQuad(System.Double,System.Double,System.UInt16)">
            <summary>
            Converts a Latitude, Longitude @zoom into a Quad and returns a QuadKey as String
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="zoom">Zoomlevel</param>
            <returns>A QuadKey as String</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Center(CoordLib.MercatorTiles.Quad)">
            <summary>
            Returns the Center Coord of a Quad
            </summary>
            <param name="quad"></param>
            <returns>The Center Coordinate of this Quad</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.QuadKeyToTileXY(CoordLib.MercatorTiles.Quad)">
            <summary>  
            Converts a QuadKey into tile XY coordinates.
             credit MS: https://learn.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system
            </summary>  
            <param name="quad">Quad of the tile</param>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.TileXYToQuad(System.Drawing.Point,System.UInt16)">
            <summary>
            Converts TileXY coordinates @zoom into a QuadKey at a specified level of detail.
            credit: https://docs.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system
            </summary>
            <param name="tileXY">Tile XY coordinate.</param>
            <param name="zoom">
                Level of detail, from 1 (lowest detail)
                to 22 (highest detail).
            </param>
            <returns>A QuadKey as String</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.HigherLevel(System.String)">
            <summary>
            Returns the QuadKey of the zoomed out level of the argument
             if at top returns an empty one (whole Map at Zoom 0)
            </summary>
            <param name="quadKey">A Quad Key</param>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.LastQ(System.String)">
            <summary>
            Returns the rightmost Quad Item (character)
             if at top returns an empty one (whole Map at Zoom 0)
            </summary>
            <param name="quadKey">A Quad Key</param>
            <returns>The rightmost Quad Digit as string</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.LeftQ(System.String)">
            <summary>
            Get the QuadKey left of the current one
            </summary>
            <param name="quadKey">A Quad Key</param>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.RightQ(System.String)">
            <summary>
            Get the QuadKey right of the current one
            </summary>
            <param name="quadKey">A Quad Key</param>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.AboveQ(System.String)">
            <summary>
            Get the QuadKey above of the current one
            </summary>
            <param name="quadKey">A Quad Key</param>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.BelowQ(System.String)">
            <summary>
            Get the QuadKey below of the current one
            </summary>
            <param name="quadKey">A Quad Key</param>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Includes(System.String,System.String)">
            <summary>
            True if the argument Quad is included in this Quad
            Implies that the argument is at the same or a higher zoom level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.IsPartOf(System.String,System.String)">
            <summary>
            True if this Quad is part of the argument
            Implies that the argument is at the same or a lower zoom level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Around(System.String)">
            <summary>
            Returns 4 Quads that are the closest neighbours of the argument
            assuming the argument represents a left,top entity
            the returned ones are then the ones to the left and above
            </summary>
            <param name="quadKey">A QuadKey</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Around4(System.Drawing.Point,System.UInt16)">
            <summary>
            Returns 4 Quads that are the closest neighbours of the argument
            The selected quad around depend on the quadrant position of 
              the pixel which marks the center of the area
            </summary>
            <param name="mapPixel">A MapPixel</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Around4(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns 4 Quads that are the closest neighbours of the argument
            The selected quad around depend on the quadrant position of 
              the coordinate which marks the center of the area
            </summary>
            <param name="latLon">A LatLon</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Around4(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns 4 Quads that are the closest neighbours of the argument
            The selected quad around depend on the quadrant position of 
              the coordinate which marks the center of the area
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Around9(System.String)">
            <summary>
            Returns 8 surounding Quad of the argument + the argument as center [0]
            </summary>
            <param name="quadKey">A QuadKey at zoom</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Around9(System.Drawing.Point,System.UInt16)">
            <summary>
            Returns 8 surounding Quad of the argument + the argument as center [0]
            </summary>
            <param name="mapPixel">A MapPixel</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Around9(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns 8 surounding Quad of the argument + the argument as center [0]
            </summary>
            <param name="latLon">A LatLon</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Around9(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns 8 surounding Quad of the argument + the argument as center [0]
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Around49EX(System.String)">
            <summary>
            Very dedicated use in Map Displays of 7x7 Tile Maps
             (it returns essentially a 8x8 Tile Map)
            Intended to return a Quadlist to lookup items for such a Map.
            It would need to lookup items in 49 Quads to complete all on this Map.
            
            It returns however only 15 surounding Quads of the argument + the argument as center [0]
            Instead of returning 49 quads it will reduce the zoom out by one level and return
            the surounding ones + extending on the short side
            results in an overflow of 15 original zoom quad areas 
            but saves to scan 49 items (i.e. 34 less)
            </summary>
            <param name="quadKey">A QuadKey at zoom</param>
            <returns>Array of neighbours -includes the argument (16 quads @ zoom-1 level)</returns>
        </member>
        <member name="T:CoordLib.MercatorTiles.TileOp">
            <summary>
            Simple Mercator Projection Tiles Method set
            based on 256x256 Tiles
            where each tile has an XY Coord at a certain Zoom Level
            The complete map is layed out in MapPixels
            
            see also: https://docs.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system
             
            Level of Detail Map Width and      Ground              Map Scale    Tile Area ( at 96 dpi)
                             Height( pixels)   Resolution
                                              ( meters / pixel)
                   ..
                    4           4,096        9783.9424           1 : 36,978,669.44   ~2,560km^2
                    5           8,192        4891.9712           1 : 18,489,334.72   ~1,280km^2
                    6          16,384        2445.9856           1 : 9,244,667.36      ~640km^2
                    7          32,768        1222.9928           1 : 4,622,333.68      ~320km^2
                    8          65,536         611.4964           1 : 2,311,166.84      ~160km^2
                    9         131,072         305.7482           1 : 1,155,583.42       ~80km^2
                   10         262,144         152.8741           1 : 577,791.71         ~40km^2
                   11         524,288          76.4370           1 : 288,895.85         ~20km^2
                   12       1,048,576          38.2185           1 : 144,447.93         ~10km^2
                   13       2,097,152          19.1093           1 : 72,223.96           ~5km^2
                   14       4,194,304           9.5546           1 : 36,111.98         ~2.5km^2
                   15       8,388,608           4.7773           1 : 18,055.99        ~1.25km^2
                   
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.MapPixelToLatLon(System.Drawing.Point,System.UInt16)">
            <summary>
            Get lat/lon coordinates from pixel coordinates
            </summary>
            <param name="mapPixel"></param>
            <param name="zoom">A zoom level</param>
            <returns>A Coordinate</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.MapPixelToTileXY(System.Drawing.Point)">
            <summary>
            Tile coordinate from MapPixel coordinates
            </summary>
            <param name="mapPixel">A MapPixel</param>
            <returns>A TileXY</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.QuadrantFromMapPixel(System.Drawing.Point)">
            <summary>
            Returns the Quadrant on a Tile where a MapPixel lies
            </summary>
            <returns>A Quadrant</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileLtMapPixel(System.Drawing.Point)">
            <summary>
            MapPixel coordinate from tile coordinate (left/top corner)
            </summary>
            <param name="tileXY">A tileXY</param>
            <returns>a MapPixel (left/top corner)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileRtMapPixel(System.Drawing.Point)">
            <summary>
            MapPixel coordinate from tile coordinate (right/top corner)
            </summary>
            <param name="tileXY">A tileXY</param>
            <returns>a MapPixel (right/top corner)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileRbMapPixel(System.Drawing.Point)">
            <summary>
            MapPixel coordinate from tile coordinate (right/bottom corner)
            </summary>
            <param name="tileXY">A tileXY</param>
            <returns>a MapPixel (right/bottom corner)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileLbMapPixel(System.Drawing.Point)">
            <summary>
            MapPixel coordinate from tile coordinate (left/bottom corner)
            </summary>
            <param name="tileXY">A tileXY</param>
            <returns>a MapPixel (left/bottom corner)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileCenterMapPixel(System.Drawing.Point)">
            <summary>
            MapPixel coordinate from tile coordinate (top/left corner)
            </summary>
            <param name="tileXY">A tileXY</param>
            <returns>a MapPixel (top/left corner)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileLtLatLon(System.Drawing.Point,System.UInt16)">
            <summary>
            Returns the coordinate of the left top of the tileXY at zoom level
            </summary>
            <param name="tileXY">A tileXY</param>
            <param name="zoom">A zoom level</param>
            <returns>The coordinate of the left top</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileCenterLatLon(System.Drawing.Point,System.UInt16)">
            <summary>
            Returns the coordinate of the center of the tileXY at zoom level
            </summary>
            <param name="tileXY">A tileXY</param>
            <param name="zoom">A zoom level</param>
            <returns>The coordinate of the center</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.LatLonToTileXY(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns the TileXY for a coordinate on the tile at zoom level
            </summary>
            <param name="coord">A coordinate</param>
            <param name="zoom">A zoomlevel</param>
            <returns>The TileXY where the coordiate is located on</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.LatLonToMapPixel(CoordLib.LatLon,System.UInt16)">
            <summary>
            Get pixel coordinates from lat/lon
            </summary>
            <param name="coord"></param>
            <param name="zoom">A zoom level</param>
            <returns>A MapPixel</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.QuadrantFromLatLon(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns the Quadrant on a Tile where a coordinate lies
            </summary>
            <returns>A Quadrant</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.LatLonToMapPixel(System.Double,System.Double,System.UInt16)">
            <summary>
            Get pixel coordinates from lat/lon as Mercator Projection
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.MapPixelToLatLon(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Gets lat/lon coordinates from pixel coordinates
            </summary>
        </member>
        <member name="T:CoordLib.MercatorTiles.TileQuadrant">
            <summary>
            A Tile Quadrant designation
            </summary>
        </member>
        <member name="T:CoordLib.MercatorTiles.TileXY">
            <summary>
            Simple Mercator Projection Tiles Method set
            based on 256x256 Tiles
            where each tile has an XY Coord at a certain Zoom Level
            The complete map is layed out in MapPixels
            
            see also: https://docs.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system
             
            Level of Detail Map Width and      Ground              Map Scale    Tile Area ( at 96 dpi)
                             Height( pixels)   Resolution
                                              ( meters / pixel)
                   ..
                    4           4,096        9783.9424           1 : 36,978,669.44   ~2,560km^2
                    5           8,192        4891.9712           1 : 18,489,334.72   ~1,280km^2
                    6          16,384        2445.9856           1 : 9,244,667.36      ~640km^2
                    7          32,768        1222.9928           1 : 4,622,333.68      ~320km^2
                    8          65,536         611.4964           1 : 2,311,166.84      ~160km^2
                    9         131,072         305.7482           1 : 1,155,583.42       ~80km^2
                   10         262,144         152.8741           1 : 577,791.71         ~40km^2
                   11         524,288          76.4370           1 : 288,895.85         ~20km^2
                   12       1,048,576          38.2185           1 : 144,447.93         ~10km^2
                   13       2,097,152          19.1093           1 : 72,223.96           ~5km^2
                   14       4,194,304           9.5546           1 : 36,111.98         ~2.5km^2
                   15       8,388,608           4.7773           1 : 18,055.99        ~1.25km^2
                   
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.Empty">
            <summary>
            An emtpy (unusable) TileXY at -1/-1
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.LatLonToTileXY(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns the TileXY for a coordinate on the tile at zoom level
            </summary>
            <param name="latLon,,">A coordinate</param>
            <param name="zoom">A zoomlevel</param>
            <returns>The TileXY where the coordiate is located on</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.LatLonToTileXY(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns the TileXY for a coordinate on the tile at zoom level
            </summary>
            <param name="lat,,">Latitude</param>
            <param name="lon,,">Longitude</param>
            <param name="zoom">A zoomlevel</param>
            <returns>The TileXY where the coordiate is located on</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.QuadrantFromLatLon(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns the Quadrant on a Tile where a coordinate lies
            </summary>
            <param name="latLon,,">A coordinate</param>
            <param name="zoom">A zoomlevel</param>
            <returns>A Quadrant</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.QuadrantFromLatLon(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns the Quadrant on a Tile where a coordinate lies
            </summary>
            <param name="lat,,">Latitude</param>
            <param name="lon,,">Longitude</param>
            <param name="zoom">A zoomlevel</param>
            <returns>A Quadrant</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.#ctor(System.Int32,System.Int32)">
            <summary>
            cTor: From X,Y (defaults to 0/0)
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.#ctor(CoordLib.MercatorTiles.TileXY)">
            <summary>
            cTor: Copy constructor
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.#ctor(System.Drawing.Point)">
            <summary>
            cTor: From a Point
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.#ctor(CoordLib.LatLon,System.UInt16)">
            <summary>
            cTor: From LatLon at Zoom Level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.#ctor(System.Double,System.Double,System.UInt16)">
            <summary>
            cTor: From Latitude, Longitude at Zoom Level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.op_Equality(CoordLib.MercatorTiles.TileXY,CoordLib.MercatorTiles.TileXY)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.op_Inequality(CoordLib.MercatorTiles.TileXY,CoordLib.MercatorTiles.TileXY)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.Equals(System.Object)">
            <summary>
            Equality towads another object
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.GetHashCode">
            <summary>
            Returns a Hashcode for this object
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.Offset(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Translates this Tile by the specified amount, wraps around
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.Wrap(System.UInt16)">
            <summary>
            Wraps the Tile for the zoom level
            </summary>
            <param name="zoom">A zoom level</param>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.X">
            <summary>
            The tiles X value
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.Y">
            <summary>
            The tiles Y value
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.AsPoint">
            <summary>
            Returns the TileXY as Point
            </summary>
            <returns>A Point</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.QuadKey(System.UInt16)">
            <summary>
            Returns a Quad(Key) for this Tile at Zoom Level
            </summary>
            <param name="zoom">A ZoomLevel</param>
            <returns>A Quad</returns>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.LeftTopMapPixel">
            <summary>
            MapPixel coordinate from tile coordinate (left/top corner)
            </summary>
            <returns>a MapPixel (left/top corner)</returns>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.RightTopMapPixel">
            <summary>
            MapPixel coordinate from tile coordinate (right/top corner)
            </summary>
            <returns>a MapPixel (right/top corner)</returns>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.RightBottomMapPixel">
            <summary>
            MapPixel coordinate from tile coordinate (right/bottom corner)
            </summary>
            <returns>a MapPixel (right/bottom corner)</returns>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.LeftBottomMapPixel">
            <summary>
            MapPixel coordinate from tile coordinate (left/bottom corner)
            </summary>
            <returns>a MapPixel (left/bottom corner)</returns>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.CenterMapPixel">
            <summary>
            MapPixel coordinate from tile coordinate (left/top corner)
            </summary>
            <returns>a MapPixel (left/top corner)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.LeftTopLatLon(System.UInt16)">
            <summary>
            Returns the coordinate of the left top corner of the tileXY at zoom level
            </summary>
            <param name="zoom">A zoom level</param>
            <returns>The coordinate of the left top corner</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.CenterLatLon(System.UInt16)">
            <summary>
            Returns the coordinate of the center of the tileXY at zoom level
            </summary>
            <param name="zoom">A zoom level</param>
            <returns>The coordinate of the center</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.Resolution_m(System.UInt16)">
            <summary>
            Returns resolution of this tile at a zoom level in meters
            - square tiles i.e. both sides have the same Resolution
            </summary>
            <param name="zoom"></param>
            <returns>Meters</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.Size_m(System.UInt16)">
            <summary>
            Returns SizeF of this tile at a zoom level in meters
            </summary>
            <param name="zoom"></param>
            <returns>A SizeF in meters</returns>
        </member>
        <member name="T:CoordLib.UTMGrid.UtmOp">
            <summary>
            UTM conversions
            https://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system
            
            The UTM system divides the Earth into 60 zones, each 6° of longitude in width.
            Each zone is segmented into 20 latitude Bands. Each latitude band is 8 degrees high,
             and is lettered starting from "C" at 80°S, increasing up the English alphabet until "X", 
             omitting the letters "I" and "O" 
            </summary>
        </member>
        <member name="M:CoordLib.UTMGrid.UtmOp.UtmZoneNo(System.Double,System.Double)">
            <summary>
            Returns the UTM Zone Number with Norway exceptions handled
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <returns>The ZoneNumber</returns>
        </member>
        <member name="M:CoordLib.UTMGrid.UtmOp.UtmZoneNo(CoordLib.LatLon)">
            <summary>
            Returns the UTM Zone Number with Norway exceptions handled
            </summary>
            <param name="latLon">A LatLon item</param>
            <returns>The ZoneNumber</returns>
        </member>
        <member name="M:CoordLib.UTMGrid.UtmOp.UtmLetterDesignator(System.Double,System.Double)">
            <summary>
            Calculates the MGRS letter designator for the given latitude.
            latitude The latitude in WGS84 to get the letter designator for.
            The letter designator.
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <returns>The ZoneLetter</returns>
        </member>
        <member name="M:CoordLib.UTMGrid.UtmOp.UtmLetterDesignator(CoordLib.LatLon)">
            <summary>
            Calculates the MGRS letter designator for the given latitude.
            latitude The latitude in WGS84 to get the letter designator for.
            The letter designator.
            </summary>
            <param name="latLon">LatLon obj</param>
            <returns>The ZoneLetter</returns>
        </member>
        <member name="M:CoordLib.UTMGrid.UtmOp.UtmZone(System.Double,System.Double)">
            <summary>
            Returns the UtmZone Designator NNC 
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            </summary>
        </member>
        <member name="M:CoordLib.UTMGrid.UtmOp.UtmZone(CoordLib.LatLon)">
            <summary>
            Returns the UtmZone Designator NNC 
            <param name="latLon">LatLon obj</param>
            </summary>
        </member>
        <member name="F:CoordLib.UTMGrid.UtmOp.UTM_ZoneList">
            <summary>
            UTM Zone list
            </summary>
        </member>
        <member name="F:CoordLib.UTMGrid.UtmOp.UTM_BandList">
            <summary>
            MGRS Band Letter List
            </summary>
        </member>
        <member name="M:CoordLib.UTMGrid.UtmOp.UTMCellCenterCoord(System.Int32,System.String)">
            <summary>
            Returns the center coordinate of an UTM Cell
              given the Zone and the Band
            </summary>
            <param name="utmZone">The Zone number</param>
            <param name="utmBand">The Band letter</param>
            <returns>The center coordinate</returns>
        </member>
        <member name="T:CoordLib.WMM.MagVar">
            <summary>
            Module to calculate magnetic variation and field given position,
            altitude, and date
             Implements the NIMA( formerly DMA ) WMM and IGRF models
             
              ** Copyright (C) 2000  Edward A Williams
              ** C# Port by Michael Coyle
              
            </summary>
        </member>
        <member name="M:CoordLib.WMM.MagVar.deg_to_rad(System.Double)">
            <summary>
            Convert degrees to radians
            </summary>
            <param name="deg">A deg number</param>
            <returns>Radians</returns>
        </member>
        <member name="M:CoordLib.WMM.MagVar.rad_to_deg(System.Double)">
            <summary>
            Convert radians to degrees
            </summary>
            <param name="rad">A radian</param>
            <returns>Degree</returns>
        </member>
        <member name="M:CoordLib.WMM.MagVar.yymmdd_to_julian_days(System.DateTime)">
            <summary>
            Convert to a Julian Date (year range is 1950..2049)
            </summary>
            <param name="dateTime">A Date</param>
            <returns>A Julian Date</returns>
        </member>
        <member name="M:CoordLib.WMM.MagVar.yymmdd_to_julian_days(System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert to a Julian Date
              Year 50..99 -> 1950 .. 1999
              Year 00..49 -> 2000 .. 2049
            </summary>
            <param name="yy"></param>
            <param name="mm"></param>
            <param name="dd"></param>
            <returns></returns>
        </member>
        <member name="M:CoordLib.WMM.MagVar.SGMagVar(System.Double,System.Double,System.Double,System.DateTime,System.Int32,System.Double[])">
            <summary>
            return variation( in radians) given: 
             geodetic latitude( radians), longitude( radians), height( km), (Julian) date,
             
             model(1985 za WMM85, 1990 za WMM90, 1995 za WMM95, 2000 za WMM2000, 2005 za WMM2005, 2010 za WMM2010, 2015 za WWM2015, 2020 WMM2020)
             model other than the above uses the latest one (i.e. -1)
             
             N and E lat and long are positive, S and W negative
            
             field needs to be double[6] in order to be filled and returned
             
            </summary>
            <param name="lat_deg">latitude in radians</param>
            <param name="lon_deg">longitude in radians</param>
            <param name="h_km">altitude in km</param>
            <param name="date">A Date</param>
            <param name="model">model to use: 1985 .. 2020 5y incr.</param>
            <param name="field"></param>
            <returns>Magnetic variation in radians</returns>
        </member>
        <member name="M:CoordLib.WMM.MagVar.SGMagVar(System.Double,System.Double,System.Double,System.Int64,System.Int32,System.Double[])">
            <summary>
            return variation( in radians) given: 
             geodetic latitude( radians), longitude( radians), height( km), (Julian) date,
             
             model(1985 za WMM85, 1990 za WMM90, 1995 za WMM95, 2000 za WMM2000, 2005 za WMM2005, 2010 za WMM2010, 2015 za WWM2015, 2020 WMM2020)
             model other than the above uses the latest one (i.e. -1)
             
             N and E lat and long are positive, S and W negative
            
             field needs to be double[6] in order to be filled and returned
             
            </summary>
            <param name="lat_rad">latitude in radians</param>
            <param name="lon_rad">longitude in radians</param>
            <param name="h_km">altitude in km</param>
            <param name="dat">julian date</param>
            <param name="model">model to use: 1985 .. 2020 5y incr.</param>
            <param name="field"></param>
            <returns>Magnetic variation in radians</returns>
        </member>
        <member name="T:CoordLib.WMM.MagVarEx">
            <summary>
            Tooling to use the WMM library part
            All calculations are done at MagVar at 3km height
              
            Extra MagVar Lookup Tree using a Quad Grid at level 9 which is about 4 times faster than calculation
            but calculation is also rather fast...
            
             Lookup 100_000x => 225 ms
             Calc   100_000x => 1055 ms
            
            Lookup values are only calculated once per cell if first time requested
            
            </summary>
        </member>
        <member name="M:CoordLib.WMM.MagVarEx.#cctor">
            <summary>
            static cTor:
            </summary>
        </member>
        <member name="M:CoordLib.WMM.MagVarEx.MagVar_rad(System.Int32,System.String)">
            <summary>
            Returns the MagVar for the center of the UTM Cell at 3km Height
            </summary>
            <param name="utmZone">An UTM Zone Number</param>
            <param name="utmBand">A Band Letter</param>
            <returns>The MagVar</returns>
        </member>
        <member name="M:CoordLib.WMM.MagVarEx.MagVar_rad_Lookup(CoordLib.LatLon)">
             <summary>
            
             </summary>
             <param name="latLon">A LatLon coordinate</param>
             <returns>The MagVar</returns>
        </member>
        <member name="M:CoordLib.WMM.MagVarEx.MagVar_rad(CoordLib.LatLon,System.Boolean)">
            <summary>
            Returns the Magnetic Declination at a location at 3km height [rad]
            </summary>
            <param name="latLon">The location</param>
            <param name="useLookup">When true using the UTM lookup table</param>
            <returns>The magnetic declination [rad]</returns>
        </member>
        <member name="M:CoordLib.WMM.MagVarEx.MagVar_deg(CoordLib.LatLon,System.Boolean)">
            <summary>
            Returns the Magnetic Declination at a location at 3km height [deg]
            </summary>
            <param name="latLon">The location</param>
            <param name="useLookup">When true using the UTM lookup table</param>
            <returns>The magnetic declination [deg]</returns>
        </member>
        <member name="M:CoordLib.WMM.MagVarEx.MagFromTrueBearing(System.Double,CoordLib.LatLon,System.Boolean)">
            <summary>
            Returns the Magnetic Bearing from a True Bearing at a location at 3km height [deg]
            </summary>
            <param name="trueBearing">The true bearing [deg]</param>
            <param name="latLon">The location</param>
            <param name="useLookup">When true using the UTM lookup table</param>
            <returns>The magnetic bearing [deg]</returns>
        </member>
        <member name="M:CoordLib.WMM.MagVarEx.MagFromTrueBearing(System.Double,CoordLib.LatLon,CoordLib.LatLon,System.Boolean)">
            <summary>
            Returns the Magnetic Bearing from a True Bearing using the MagVar at the intermediate point of loc1 and loc2 at 3km height [deg]
            </summary>
            <param name="trueBearing">The true bearing [deg]</param>
            <param name="latLon1">The location (from)</param>
            <param name="latLon2">The location (to)</param>
            <param name="useLookup">When true using the UTM lookup table</param>
            <returns>The magnetic bearing [deg]</returns>
        </member>
        <member name="M:CoordLib.WMM.MagVarEx.TrueFromMagBearing(System.Double,CoordLib.LatLon,System.Boolean)">
            <summary>
            Returns the True Bearing from a Magnetic Bearing at a location at 3km height [deg]
            </summary>
            <param name="magBearing">The magnetic bearing [deg]</param>
            <param name="latLon">The location</param>
            <param name="useLookup">When true using the UTM lookup table</param>
            <returns>The magnetic bearing [deg]</returns>
        </member>
        <member name="M:CoordLib.WMM.MagVarEx.TrueFromMagBearing(System.Double,CoordLib.LatLon,CoordLib.LatLon,System.Boolean)">
            <summary>
            Returns the True Bearing from a Magnetic Bearing using the MagVar at the intermediate point of loc1 and loc2 at 3km height [deg]
            </summary>
            <param name="magBearing">The magnetic bearing [deg]</param>
            <param name="latLon1">The location (from)</param>
            <param name="latLon2">The location (to)</param>
            <param name="useLookup">When true using the UTM lookup table</param>
            <returns>The magnetic bearing [deg]</returns>
        </member>
    </members>
</doc>
