<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoordLib</name>
    </assembly>
    <members>
        <member name="T:CoordLib.ConvConsts">
            <summary>
            Useful conversions and constants
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.KmPerSm">
            <summary>
            Const Km per Sm (Statute Mile)
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.KmPerNm">
            <summary>
            Const Km per Nm
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.MPerFt">
            <summary>
            Const M per Ft
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.EarthRadiusM">
            <summary>
            Const Earth radius in M
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.EarthFlattening_WGS84">
            <summary>
            Const Earth Flattening for the WGS 84 spheroid
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.EarthRadiusKm">
            <summary>
            Const Earth radius in km
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.EarthRadiusNm">
            <summary>
            Const Earth radius in Nm
            </summary>
        </member>
        <member name="F:CoordLib.ConvConsts.EarthRadiusSM">
            <summary>
            Const Earth radius in SM
            </summary>
        </member>
        <member name="M:CoordLib.ConvConsts.MToNm(System.Double)">
            <summary>
            Convert m to nm
            </summary>
            <param name="m">m to convert</param>
            <returns>nm</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.MToSm(System.Double)">
            <summary>
            Convert m to Sm
            </summary>
            <param name="m">m to convert</param>
            <returns>Sm</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.KmToNm(System.Double)">
            <summary>
            Convert km to nm
            </summary>
            <param name="km">km to convert</param>
            <returns>nm</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.KmToSm(System.Double)">
            <summary>
            Convert km to Sm
            </summary>
            <param name="km">km to convert</param>
            <returns>Sm</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.NmToM(System.Double)">
            <summary>
            Convert nm to m
            </summary>
            <param name="nm">nm to convert</param>
            <returns>m</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.SmToM(System.Double)">
            <summary>
            Convert Sm to m
            </summary>
            <param name="sm">Sm to convert</param>
            <returns>m</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.NmToKm(System.Double)">
            <summary>
            Convert nm to km
            </summary>
            <param name="nm">nm to convert</param>
            <returns>km</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.SmToKm(System.Double)">
            <summary>
            Convert Sm to km
            </summary>
            <param name="sm">Sm to convert</param>
            <returns>km</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.MToFt(System.Double)">
            <summary>
            Convert m to ft
            </summary>
            <param name="m">m to convert</param>
            <returns>ft</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.FtToM(System.Double)">
            <summary>
            Convert ft to m
            </summary>
            <param name="ft">ft to convert</param>
            <returns>m</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.ToRadians(System.Double)">
            <summary>
            Convert Radians to Degrees
            </summary>
            <param name="angleInDegree">An angle in degrees</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:CoordLib.ConvConsts.ToDegrees(System.Double)">
            <summary>
            Convert Degrees to Radians
            </summary>
            <param name="angleInRadians">An angle in radians</param>
            <returns>The angle in degrees</returns>
        </member>
        <member name="T:CoordLib.Dms">
            <summary>
            Geodesy representation conversion functions  
            Latitude/longitude points may be represented as double degrees, or subdivided into sexagesimal
            minutes and seconds.
            1:1 C# translation from above
            </summary>
        </member>
        <member name="F:CoordLib.Dms.Separator">
            <summary>
            Separator character to be used to separate degrees, minutes, seconds, and cardinal directions.
            
            Set to '\u202f' (narrow no-break space) for improved formatting.
                 * @example
                 * var p = new LatLon(51.2, 0.33);  // 51°12′00.0″N, 000°19′48.0″E
                 *   Dms.separator = '\u202f';        // narrow no-break space
                 *   var pʹ = new LatLon( 51.2, 0.33 ); // 51° 12′ 00.0″ N, 000° 19′ 48.0″ E
            </summary>
        </member>
        <member name="M:CoordLib.Dms.ParseDMS(System.String)">
            <summary>
            Parses string representing degrees/minutes/seconds into numeric degrees.
            
            This is very flexible on formats, allowing signed double degrees, or deg-min-sec optionally
            suffixed by compass direction( NSEW). A variety of separators are accepted( eg 3° 37′ 09″W).
            Seconds and minutes may be omitted.
            
                 * @example
                 * var lat = Dms.parseDMS("N51° 28' 40.12\"");
                 *     var lon = Dms.parseDMS( "W0° 00' 5.31\"" );
                 *     var p1 = new LatLon( lat, lon ); // N51.4778°, W0.0015°
            </summary>
            <param name="dmsStr">{string|number} dmsStr - Degrees or deg/min/sec in variety of formats.</param>
            <returns>{number} Degrees as double number.</returns>
        </member>
        <member name="M:CoordLib.Dms.ToDMS(System.Double,System.Boolean,System.String,System.Int32)">
            <summary>
            Converts double degrees to deg/min/sec format
             - degree, prime, double-prime symbols are added, but sign is discarded, though no compass
            direction is added.
            </summary>
            <param name="deg">{number} deg - Degrees to be formatted as specified.</param>
            <param name="lat">bool - Format Latitude(00 Deg), else it is Longitude(000 Deg)</param>
            <param name="format">{string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.</param>
            <param name="dPlaces">{number} [dp=0|2|4] - Number of double places to use – default 0 for dms, 2 for dm, 4 for d.</param>
            <returns>{string} Degrees formatted as deg/min/secs according to specified format.</returns>
        </member>
        <member name="M:CoordLib.Dms.ToLat(System.Double,System.String,System.Int32)">
            <summary>
            Converts numeric degrees to deg/min/sec latitude (2-digit degrees, prefixed with N/S).
            </summary>
            <param name="deg">{number} deg - Degrees to be formatted as specified.</param>
            <param name="format">{string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.</param>
            <param name="dPlaces">{number} [dp=0|2|4] - Number of double places to use – default 0 for dms, 2 for dm, 4 for d.</param>
            <returns>{string} Degrees formatted as deg/min/secs according to specified format.</returns>
        </member>
        <member name="M:CoordLib.Dms.ToLon(System.Double,System.String,System.Int32)">
            <summary>
            Convert numeric degrees to deg/min/sec longitude (3-digit degrees, prefixed with E/W)
            </summary>
            <param name="deg">{number} deg - Degrees to be formatted as specified.</param>
            <param name="format">{string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.</param>
            <param name="dPlaces">{number} [dp=0|2|4] - Number of double places to use – default 0 for dms, 2 for dm, 4 for d.</param>
            <returns>{string} Degrees formatted as deg/min/secs according to specified format.</returns>
        </member>
        <member name="M:CoordLib.Dms.ToBrng(System.Double,System.String,System.Int32)">
            <summary>
            Converts numeric degrees to deg/min/sec as a bearing (0°..360°)
            </summary>
            <param name="deg">{number} deg - Degrees to be formatted as specified.</param>
            <param name="format">{string} [format=dms] - Return value as 'd', 'dm', 'dms' for deg, deg+min, deg+min+sec.</param>
            <param name="dPlaces">{number} [dp=0|2|4] - Number of double places to use – default 0 for dms, 2 for dm, 4 for d.</param>
            <returns>{string} Degrees formatted as deg/min/secs according to specified format.</returns>
        </member>
        <member name="M:CoordLib.Dms.CompassPoint(System.Double,System.Int32)">
            <summary>
            Returns compass point (to given precision) for supplied bearing.
                 * @example
                 * var point = Dms.compassPoint(24);    // point = 'NNE'
                 * var point = Dms.compassPoint( 24, 1 ); // point = 'N'
            </summary>
            <param name="bearing">{number} bearing - Bearing in degrees from north.</param>
            <param name="precision">{number} [precision=3] - Precision (1:cardinal / 2:intercardinal / 3:secondary-intercardinal).</param>
            <returns>{string} Compass point for supplied bearing.</returns>
        </member>
        <member name="T:CoordLib.Extensions">
            <summary>
            Helper Extensions 
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.ToRadians(System.Double)">
            <summary>
            Returns the angle in radians
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.ToDegrees(System.Double)">
            <summary>
            Returns the angle in Degrees
            </summary>
        </member>
        <member name="M:CoordLib.Extensions.Clip(System.Double,System.Double,System.Double)">
            <summary>
            Clips a number to the specified minimum and maximum values.
            Returns the clipped value
            </summary>
            <param name="_d"></param>
            <param name="minValue">Minimum allowable value.</param>
            <param name="maxValue">Maximum allowable value.</param>
            <returns>The clipped value.</returns>
        </member>
        <member name="M:CoordLib.Extensions.Clip(System.Int32,System.Double,System.Double)">
            <summary>
            Clips a number to the specified minimum and maximum values.
            Returns the clipped value
            </summary>
            <param name="_i"></param>
            <param name="minValue">Minimum allowable value.</param>
            <param name="maxValue">Maximum allowable value.</param>
            <returns>The clipped value.</returns>
        </member>
        <member name="M:CoordLib.Extensions.Clip(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clips a number to the specified minimum and maximum values.
            Returns the clipped value
            </summary>
            <param name="_i"></param>
            <param name="minValue">Minimum allowable value.</param>
            <param name="maxValue">Maximum allowable value.</param>
            <returns>The clipped value.</returns>
        </member>
        <member name="T:CoordLib.Geo">
            <summary>
            Geodetic functions
            A pool of static base functions
            
            Derived from 
            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
            Latitude/longitude spherical geodesy tools                         (c) Chris Veness 2002-2017  */
                                                                                              MIT Licence  */
            www.movable-type.co.uk/scripts/latlong.html                                                    */
            www.movable-type.co.uk/scripts/geodesy/docs/module-latlon-spherical.html                       */
            https://github.com/chrisveness/geodesy
            - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
            </summary>
        </member>
        <member name="M:CoordLib.Geo.DistanceTo(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the distance from ‘this’ point to destination point (using haversine formula).
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pointLat">Latitude of destination point</param>
            <param name="pointLon">Longitude of destination point</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{number} Distance between this point and destination point, in same units as radius.</returns>
        </member>
        <member name="M:CoordLib.Geo.BearingTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the (initial) bearing from ‘this’ point to destination point.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pointLat">Latitude of destination point</param>
            <param name="pointLon">Longitude of destination point</param>
            <returns>{number} Initial bearing in degrees from north.</returns>
        </member>
        <member name="M:CoordLib.Geo.FinalBearingTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns final bearing arriving at destination destination point from ‘this’ point; the final bearing
            will differ from the initial bearing by varying degrees according to distance and latitude.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pointLat">Latitude of destination point</param>
            <param name="pointLon">Longitude of destination point</param>
            <returns>{number} Final bearing in degrees from north.</returns>
        </member>
        <member name="M:CoordLib.Geo.MidpointTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the midpoint between ‘this’ point and the supplied point.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pointLat">Latitude of destination point</param>
            <param name="pointLon">Longitude of destination point</param>
            <returns>Lat and Lon of the Mid point as array</returns>
        </member>
        <member name="M:CoordLib.Geo.IntermediatePointTo(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the point at given fraction between ‘this’ point and specified point.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pointLat">Latitude of destination point</param>
            <param name="pointLon">Longitude of destination point</param>
            <param name="fraction">{number} fraction - Fraction between the two points (0 = this point, 1 = specified point).</param>
            <returns>Lat and Lon of the intermediate point as array</returns>
        </member>
        <member name="M:CoordLib.Geo.DestinationPoint(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the destination point from ‘this’ point having travelled the given distance on the
            given initial bearing( bearing normally varies around path followed ).
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="distance">{number} distance - Distance travelled, in same units as earth radius (default: metres).</param>
            <param name="bearing">{number} bearing - Initial bearing in degrees from north.</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>Lat and Lon of the Destination point as array</returns>
        </member>
        <member name="M:CoordLib.Geo.Intersection(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the point of intersection of two paths defined by point and bearing.
            </summary>
            <param name="p1Lat">Latitude of First point</param>
            <param name="p1Lon">Longitude of First point</param>
            <param name="brng1">{number} brng1 - Initial bearing from first point.</param>
            <param name="p2Lat">Latitude of Second point</param>
            <param name="p2Lon">Longitude of Second point</param>
            <param name="brng2">{number} brng2 - Initial bearing from second point.</param>
            <returns>Lat and Lon of the Intersection point as array (null if no unique intersection defined)</returns>
        </member>
        <member name="M:CoordLib.Geo.DoubleCrossTrackDistanceTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns (signed) distance from ‘this’ point to great circle defined by start-point and end-point.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pStartLat">Latitude of Start point of great circle path</param>
            <param name="pStartLon">Longitude of Start point of great circle path</param>
            <param name="pEndLat">Latitude of End point of great circle path</param>
            <param name="pEndLon">Longitude of End point of great circle path</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{number} Distance to great circle (-ve if to left, +ve if to right of path).</returns>
        </member>
        <member name="M:CoordLib.Geo.AlongTrackDistanceTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns how far ‘this’ point is along a path from from start-point, heading towards end-point.
            That is, if a perpendicular is drawn from ‘this’ point to the( great circle ) path, the along-track
            distance is the distance from the start point to where the perpendicular crosses the path.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="thisLon">Longitude of starting point</param>
            <param name="pStartLat">Latitude of Start point of great circle path</param>
            <param name="pStartLon">Longitude of Start point of great circle path</param>
            <param name="pEndLat">Latitude of End point of great circle path</param>
            <param name="pEndLon">Longitude of End point of great circle path</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{number} Distance along great circle to point nearest ‘this’ point.</returns>
        </member>
        <member name="M:CoordLib.Geo.MaxLatitude(System.Double,System.Double)">
            <summary>
            Returns maximum latitude reached when travelling on a great circle on given bearing from this
            point('Clairaut's formula'). Negate the result for the minimum latitude (in the Southern
            hemisphere).
            
            The maximum latitude is independent of longitude; it will be the same for all points on a given
            latitude.
            </summary>
            <param name="thisLat">Latitude of starting point</param>
            <param name="bearing">{number} bearing - Initial bearing.</param>
            <returns>maximum latitude reached</returns>
        </member>
        <member name="M:CoordLib.Geo.CrossingParallels(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the pair of meridians at which a great circle defined by two points crosses the given
            latitude.If the great circle doesn't reach the given latitude, null is returned.
            </summary>
            <param name="p1Lat">Latitude of First point defining great circle</param>
            <param name="p1Lon">Longitude of First point defining great circle</param>
            <param name="p2Lat">Latitude of Second point defining great circle</param>
            <param name="p2Lon">Longitude of Second point defining great circle</param>
            <param name="latitude">{number} latitude - Latitude crossings are to be determined for.</param>
            <returns>{Object|null} Object containing { lon1, lon2 } or null if given latitude not reached.</returns>
        </member>
        <member name="M:CoordLib.Geo.Wrap90(System.Double)">
             Constrain degrees to range -90..+90 (for latitude); e.g. -91 => -89, 91 => 89.
            
             @private
             @param {number} degrees
             @returns degrees within range -90..+90.
        </member>
        <member name="M:CoordLib.Geo.Wrap180(System.Double)">
             Constrain degrees to range -180..+180 (for longitude); e.g. -181 => 179, 181 => -179.
            
             @private
             @param {number} degrees
             @returns degrees within range -180..+180.
        </member>
        <member name="M:CoordLib.Geo.Wrap360(System.Double)">
             Constrain degrees to range 0..360 (for bearings); e.g. -1 => 359, 361 => 1.
            
             @private
             @param {number} degrees
             @returns degrees within range 0..360.
        </member>
        <member name="T:CoordLib.LatLon">
            <summary>
            Implements a Lat, Lon point
            1:1 C# translation of functions from above
            Redesign to provide Static Functions with Lat/Lon doubles in Geo.XY
            and using them here for the LatLon Class
            
            Added Altitude for convenience
            Added UTM Zone resolution
            
            Changed to Struct (Aug 2033/BM)
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.Empty">
            <summary>
            Returns an Empty LatLon (Lat,Lon,Alt=NaN)
            </summary>
        </member>
        <member name="F:CoordLib.LatLon._lat">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="F:CoordLib.LatLon._lon">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="F:CoordLib.LatLon._altitude">
            <summary>
            Altitude metres above ellipsoid
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.Lat">
            <summary>
            Latitude part
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.Lon">
            <summary>
            Longitude part
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.Altitude">
            <summary>
            Altitude part metres above ellipsoid.
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.IsEmpty">
            <summary>
            True if Lat or Lon are not assigned
            </summary>
        </member>
        <member name="M:CoordLib.LatLon.#ctor(System.Boolean)">
            <summary>
            Creates a LatLon point on the earth's surface at the specified latitude / longitude.
             initialized to 0/0/0
            </summary>
            <param name="initZero">Will init an 0/0/0 item if true (default) else it's Empty</param>
        </member>
        <member name="M:CoordLib.LatLon.#ctor(System.Double,System.Double)">
            <summary>
            Creates a LatLon point on the earth's surface at the specified latitude / longitude.
            </summary>
            <param name="lat"></param>
            <param name="lon"></param>
        </member>
        <member name="M:CoordLib.LatLon.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a LatLon point on the earth's surface at the specified latitude / longitude / altitude.
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="alt">Altitude above the ellipsoid</param>
        </member>
        <member name="M:CoordLib.LatLon.#ctor(System.Double[])">
            <summary>
            Creates a LatLon point on the earth's surface at the specified latitude / longitude.
            </summary>
            <param name="latLon"> Array of double where [0] = Lat, [1] = Lon, [2]= Alt (if provided)</param>
        </member>
        <member name="M:CoordLib.LatLon.#ctor(CoordLib.LatLon)">
            <summary>
            Creates a LatLon point on the earth's surface at the specified latitude / longitude.
              as copy of the given LatLon
            </summary>
            <param name="other">LatLon to copy from</param>
        </member>
        <member name="M:CoordLib.LatLon.DistanceTo(CoordLib.LatLon,System.Double)">
            <summary>
            Returns the distance from ‘this’ point to destination point (using haversine formula).
                 * @example
                 *     var p1 = new LatLon( 52.205, 0.119 );
                 *     var p2 = new LatLon( 48.857, 2.351 );
                 *     var d = p1.distanceTo( p2 ); // 404.3 km
            </summary>
            <param name="point">{LatLon} point - Latitude/longitude of destination point</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{number} Distance between this point and destination point, in same units as radius.</returns>
        </member>
        <member name="M:CoordLib.LatLon.BearingTo(CoordLib.LatLon)">
            <summary>
            Returns the (initial) bearing from ‘this’ point to destination point.
            
                 * @example
                 *     var p1 = new LatLon( 52.205, 0.119 );
                 *     var p2 = new LatLon( 48.857, 2.351 );
                 *     var b1 = p1.bearingTo( p2 ); // 156.2°
            </summary>
            <param name="point">{LatLon} point - Latitude/longitude of destination point.</param>
            <returns>{number} Initial bearing in degrees from north.</returns>
        </member>
        <member name="M:CoordLib.LatLon.FinalBearingTo(CoordLib.LatLon)">
            <summary>
            Returns final bearing arriving at destination destination point from ‘this’ point; the final bearing
            will differ from the initial bearing by varying degrees according to distance and latitude.
            
                 * @example
                 *     var p1 = new LatLon( 52.205, 0.119 );
                 *     var p2 = new LatLon( 48.857, 2.351 );
                 *     var b2 = p1.finalBearingTo( p2 ); // 157.9°
            </summary>
            <param name="point">{LatLon} point - Latitude/longitude of destination point.</param>
            <returns>{number} Final bearing in degrees from north.</returns>
        </member>
        <member name="M:CoordLib.LatLon.MidpointTo(CoordLib.LatLon)">
            <summary>
            Returns the midpoint between ‘this’ point and the supplied point.
            
             * @example
             *     var p1 = new LatLon( 52.205, 0.119 );
             *     var p2 = new LatLon( 48.857, 2.351 );
             *     var pMid = p1.midpointTo( p2 ); // 50.5363°N, 001.2746°E
            </summary>
            <param name="point">{LatLon} point - Latitude/longitude of destination point.</param>
            <returns>{LatLon} Midpoint between this point and the supplied point.</returns>
        </member>
        <member name="M:CoordLib.LatLon.IntermediatePointTo(CoordLib.LatLon,System.Double)">
            <summary>
            Returns the point at given fraction between ‘this’ point and specified point.
            
                 * @example
                 *   let p1 = new LatLon( 52.205, 0.119 );
                 *   let p2 = new LatLon( 48.857, 2.351 );
                 *   let pMid = p1.intermediatePointTo( p2, 0.25 ); // 51.3721°N, 000.7073°E
            </summary>
            <param name="point">{LatLon} point - Latitude/longitude of destination point.</param>
            <param name="fraction">{number} fraction - Fraction between the two points (0 = this point, 1 = specified point).</param>
            <returns>{LatLon} Intermediate point between this point and destination point.</returns>
        </member>
        <member name="M:CoordLib.LatLon.DestinationPoint(System.Double,System.Double,System.Double)">
            <summary>
            Returns the destination point from ‘this’ point having travelled the given distance on the
            given initial bearing( bearing normally varies around path followed ).
            
                 * @example
                 *     var p1 = new LatLon( 51.4778, -0.0015 );
                 *     var p2 = p1.destinationPoint( 7794, 300.7 ); // 51.5135°N, 000.0983°W
            </summary>
            <param name="distance">{number} distance - Distance travelled, in same units as earth radius (default: metres).</param>
            <param name="bearing">{number} bearing - Initial bearing in degrees from north.</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{LatLon} Destination point.</returns>
        </member>
        <member name="M:CoordLib.LatLon.Intersection(CoordLib.LatLon,System.Double,CoordLib.LatLon,System.Double)">
            <summary>
            Returns the point of intersection of two paths defined by point and bearing.
            
                 * @example
                 *     var p1 = LatLon( 51.8853, 0.2545 ), brng1 = 108.547;
                 *     var p2 = LatLon( 49.0034, 2.5735 ), brng2 = 32.435;
                 *     var pInt = LatLon.intersection( p1, brng1, p2, brng2 ); // 50.9078°N, 004.5084°E
            </summary>
            <param name="p1">{LatLon} p1 - First point.</param>
            <param name="brng1">{number} brng1 - Initial bearing from first point.</param>
            <param name="p2">{LatLon} p2 - Second point.</param>
            <param name="brng2">{number} brng2 - Initial bearing from second point.</param>
            <returns>{LatLon|null} Destination point (null if no unique intersection defined).</returns>
        </member>
        <member name="M:CoordLib.LatLon.DoubleCrossTrackDistanceTo(CoordLib.LatLon,CoordLib.LatLon,System.Double)">
            <summary>
            Returns (signed) distance from ‘this’ point to great circle defined by start-point and end-point.
            
                 * @example
                 *   var pCurrent = new LatLon( 53.2611, -0.7972 );
                 *   var p1 = new LatLon( 53.3206, -1.7297 );
                 *   var p2 = new LatLon( 53.1887, 0.1334 );
                 *   var d = pCurrent.crossTrackDistanceTo( p1, p2 );  // -307.5 m
            </summary>
            <param name="pathStart">{LatLon} pathStart - Start point of great circle path.</param>
            <param name="pathEnd">{LatLon} pathEnd - End point of great circle path.</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{number} Distance to great circle (-ve if to left, +ve if to right of path).</returns>
        </member>
        <member name="M:CoordLib.LatLon.AlongTrackDistanceTo(CoordLib.LatLon,CoordLib.LatLon,System.Double)">
            <summary>
            Returns how far ‘this’ point is along a path from from start-point, heading towards end-point.
            That is, if a perpendicular is drawn from ‘this’ point to the( great circle ) path, the along-track
            distance is the distance from the start point to where the perpendicular crosses the path.
            
                 * @example
                 *   var pCurrent = new LatLon( 53.2611, -0.7972 );
                 *   var p1 = new LatLon( 53.3206, -1.7297 );
                 *   var p2 = new LatLon( 53.1887, 0.1334 );
                 *   var d = pCurrent.alongTrackDistanceTo( p1, p2 );  // 62.331 km
            </summary>
            <param name="pathStart">{LatLon} pathStart - Start point of great circle path.</param>
            <param name="pathEnd">{LatLon} pathEnd - End point of great circle path.</param>
            <param name="radius">{number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).</param>
            <returns>{number} Distance along great circle to point nearest ‘this’ point.</returns>
        </member>
        <member name="M:CoordLib.LatLon.MaxLatitude(System.Double)">
            <summary>
            Returns maximum latitude reached when travelling on a great circle on given bearing from this
            point('Clairaut's formula'). Negate the result for the minimum latitude (in the Southern
            hemisphere).
            
            The maximum latitude is independent of longitude; it will be the same for all points on a given
            latitude.
            </summary>
            <param name="bearing">{number} bearing - Initial bearing.</param>
            <returns>maximum latitude reached</returns>
        </member>
        <member name="M:CoordLib.LatLon.CrossingParallels(CoordLib.LatLon,CoordLib.LatLon,System.Double)">
            <summary>
            Returns the pair of meridians at which a great circle defined by two points crosses the given
            latitude.If the great circle doesn't reach the given latitude, null is returned.
            </summary>
            <param name="point1">{LatLon} point1 - First point defining great circle.</param>
            <param name="point2">{LatLon} point2 - Second point defining great circle.</param>
            <param name="latitude">{number} latitude - Latitude crossings are to be determined for.</param>
            <returns>{Object|null} Object containing { lon1, lon2 } or null if given latitude not reached.</returns>
        </member>
        <member name="M:CoordLib.LatLon.Equals(CoordLib.LatLon)">
            <summary>
            Checks if another point is equal to ‘this’ point.
            
                 * @example
                 *   var p1 = new LatLon( 52.205, 0.119 );
                 *   var p2 = new LatLon( 52.205, 0.119 );
                 *   var equal = p1.equals( p2 ); // true
            </summary>
            <param name="point">{LatLon} point - Point to be compared against this point.</param>
            <returns>{bool}   True if points are identical.</returns>
        </member>
        <member name="M:CoordLib.LatLon.ToString(System.String,System.Int32)">
            <summary>
            Returns a string representation of ‘this’ point, formatted as degrees, degrees+minutes, or
            degrees+minutes+seconds.
            </summary>
            <param name="format">{string} [format=dms] - Format point as 'd', 'dm', 'dms'.</param>
            <param name="dp">{number} [dp=0|2|4] - Number of decimal places to use - default 0 for dms, 2 for dm, 4 for d.</param>
            <returns>{string} Comma-separated latitude/longitude.</returns>
        </member>
        <member name="M:CoordLib.LatLon.ToString">
            <summary>
            Returns the default string representation 
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:CoordLib.LatLon._utmZoneNo(CoordLib.LatLon)">
            <summary>
            Returns the UTM Zone Number with Norway exceptions handled
            </summary>
            <param name="ll">A LatLon item</param>
            <returns>The ZoneNumber</returns>
        </member>
        <member name="M:CoordLib.LatLon._utmLetterDesignator(CoordLib.LatLon)">
            <summary>
            Calculates the MGRS letter designator for the given latitude.
            latitude The latitude in WGS84 to get the letter designator for.
            The letter designator.
            </summary>
            <param name="latLon">LatLon obj</param>
            <returns>The ZoneLetter</returns>
        </member>
        <member name="P:CoordLib.LatLon.UtmZone">
            <summary>
            Returns the UtmZone Designator NNC 
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.UtmZoneNumber">
            <summary>
            Returns the UTM Longitude Zone Number
            </summary>
        </member>
        <member name="P:CoordLib.LatLon.UtmZoneLetter">
            <summary>
            Returns the UTM Latitude Zone Letter
            </summary>
        </member>
        <member name="T:CoordLib.LLA">
            <summary>
            Handle MS FSim LLA items
            
            N9° 44' 31.60",E118° 45' 31.51",+000045.00
            </summary>
        </member>
        <member name="M:CoordLib.LLA.ToLL(System.Double,System.Double)">
            <summary>
            Convert from values to an LL string
              N9° 44' 31.60",E118° 45' 31.51"
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <returns>An LL string</returns>
        </member>
        <member name="M:CoordLib.LLA.ToLLA(System.Double,System.Double,System.Double)">
            <summary>
            Convert from values to an LLA string
              N9° 44' 31.60",E118° 45' 31.51",+000045.00
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="alt">Altitude (must be in meters for FSim use)</param>
            <returns>An LLA string</returns>
        </member>
        <member name="M:CoordLib.LLA.TryParseLL(System.String,System.Double@,System.Double@)">
            <summary>
            Converts the string from an LL to its double values or returns false
            </summary>
            <param name="ll">An LL string</param>
            <param name="lat">out Lat</param>
            <param name="lon">out Lon</param>
            <returns>True if successfull</returns>
        </member>
        <member name="M:CoordLib.LLA.TryParseLLA(System.String,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts the string from an LLA to its double values or returns false
            </summary>
            <param name="lla">An LLA string</param>
            <param name="lat">out Lat</param>
            <param name="lon">out Lon</param>
            <param name="alt">out Alt</param>
            <returns>True if successfull</returns>
        </member>
        <member name="T:CoordLib.LLPoint">
            <summary>
            Point Struct with LatLon items as Points
            Note: Math operations are performed on the numbers and not in any particular projection
            </summary>
        </member>
        <member name="F:CoordLib.LLPoint.Empty">
            <summary>
            Represents a Point that has X and Y values set to zero.
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Point struct with the specified coordinates.
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
        </member>
        <member name="M:CoordLib.LLPoint.#ctor(CoordLib.LatLon)">
            <summary>
            Initializes a new instance of the Point struct with the specified LatLon obj
            </summary>
            <param name="latLon">A LatLon Item</param>
        </member>
        <member name="M:CoordLib.LLPoint.AsLatLon">
            <summary>
            Returns the Point as LatLon Type
            </summary>
        </member>
        <member name="P:CoordLib.LLPoint.IsEmpty">
            <summary>
            returns true if coordinates wasn't assigned
            </summary>
        </member>
        <member name="P:CoordLib.LLPoint.Lat">
            <summary>
            Latitude of this Point
            </summary>
        </member>
        <member name="P:CoordLib.LLPoint.Lon">
            <summary>
            Longitude of this Point
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.op_Explicit(CoordLib.LLPoint)~CoordLib.LatLon">
            <summary>
            Returns the Point as LatLon Type
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.op_Addition(CoordLib.LLPoint,CoordLib.LLSize)">
            <summary>
            Translates a Point by a given Size.
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.op_Subtraction(CoordLib.LLPoint,CoordLib.LLSize)">
            <summary>
            Translates a Point by the negative of a given Size.
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.op_Subtraction(CoordLib.LLPoint,CoordLib.LLPoint)">
            <summary>
            Translates a Point by the negative of a given Point
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.op_Equality(CoordLib.LLPoint,CoordLib.LLPoint)">
            <summary>
            Compares two Point objects. The result specifies whether the values of the X and Y properties of the two Point objects are equal.
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.op_Inequality(CoordLib.LLPoint,CoordLib.LLPoint)">
            <summary>
            Compares two Point objects. The result specifies whether the values of the X or Y properties of the two Point objects are unequal.
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.Add(CoordLib.LLPoint,CoordLib.LLSize)">
            <summary>
            Adds the specified Size to the specified Point.
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.Subtract(CoordLib.LLPoint,CoordLib.LLSize)">
            <summary>
            Returns the result of subtracting specified Size from the specified Point.
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.Equals(System.Object)">
            <summary>
            Specifies whether this point instance contains the same coordinates as the specified object.
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.Offset(CoordLib.LLPoint)">
            <summary>
            Translates this Point by the specified Point.
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.Offset(System.Double,System.Double)">
            <summary>
            Translates this Point by the specified amount.
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.GetHashCode">
            <summary>
            Returns a hash code for this Point.
            </summary>
        </member>
        <member name="M:CoordLib.LLPoint.ToString">
            <summary>
            Converts this Point to a human-readable string.
            </summary>
        </member>
        <member name="T:CoordLib.LLRectangle">
            <summary>
            Rectangle made from LatLon Coordinate Items
            Note: Math operations are performed on the numbers and not in any particular projection
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.#cctor">
            <summary>
            static cTor: init empty field
            </summary>
        </member>
        <member name="F:CoordLib.LLRectangle.Empty">
            <summary>
            Represents a Rectangle structure with its properties left uninitialized.
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.Lon">
            <summary>
            Longitude (X) Part
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.Lat">
            <summary>
            Latitude (Y) Part
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.WidthLon">
            <summary>
            Radial Distance as angle (deg)
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.HeightLat">
            <summary>
            Radial Distance as angle (deg)
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.IsEmpty">
            <summary>
            Returns true if coordinates are not assigned
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.#ctor(System.Boolean)">
            <summary>
            cTor: Empty (init as Empty)
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            cTor: from valued
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.#ctor(CoordLib.LLPoint,CoordLib.LLSize)">
            <summary>
            cTor: from point and size
            </summary>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:CoordLib.LLRectangle.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns an LLRectangle from Left,Top,Right,Bottom points
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.LocationTopLeft">
            <summary>
            TopLeft Point
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.LocationRightBottom">
            <summary>
            Right Bottom Point
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.LocationMiddle">
            <summary>
            Center Point
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.Size">
            <summary>
            Gets or sets the size of this Rectangle.
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.Left">
            <summary>
            Left (Longitude)
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.Top">
            <summary>
            Top (Latitude)
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.Right">
            <summary>
            Right (Lon + WidthDeg)
            </summary>
        </member>
        <member name="P:CoordLib.LLRectangle.Bottom">
            <summary>
            Bottom (Lat-Height)
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.Equals(System.Object)">
            <summary>
            Tests whether obj is a Rectangle structure with the same location and size of this Rectangle structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.op_Equality(CoordLib.LLRectangle,CoordLib.LLRectangle)">
            <summary>
            Equality: Tests whether two Rectangle structures have equal location and size.
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.op_Inequality(CoordLib.LLRectangle,CoordLib.LLRectangle)">
            <summary>
            Inequality: Tests whether two Rectangle structures differ in location or size.
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.Contains(System.Double,System.Double)">
            <summary>
            Determines if the specified point is contained within this Rectangle structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.Contains(CoordLib.LLPoint)">
            <summary>
            Determines if the specified point is contained within this Rectangle structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.Contains(CoordLib.LLRectangle)">
            <summary>
            Determines if the rectangular region represented by rect is entirely contained within this Rectangle structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.GetHashCode">
            <summary>
            Returns the hash code for this Rectangle structure. For information about the use of hash codes, see GetHashCode() .
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoordLib.LLRectangle.Offset(CoordLib.LLPoint)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.Offset(System.Double,System.Double)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:CoordLib.LLRectangle.ToString">
            <summary>
            Converts the attributes of this Rectangle to a human-readable string.
            </summary>
        </member>
        <member name="T:CoordLib.LLSize">
            <summary>
            Size Struct with LatLon items as Points
            Note: Math operations are performed on the numbers and not in any particular projection
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.#cctor">
            <summary>
            static cTor:
            </summary>
        </member>
        <member name="F:CoordLib.LLSize.Empty">
            <summary>
            An Empty LLSize
            </summary>
        </member>
        <member name="P:CoordLib.LLSize.IsEmpty">
            <summary>
            Get: true if it is empty (Height and Width value of 0)
            </summary>
        </member>
        <member name="P:CoordLib.LLSize.WidthLon">
            <summary>
            Width or Longitude degrees
            </summary>
        </member>
        <member name="P:CoordLib.LLSize.HeightLat">
            <summary>
            Height or Latitude degrees
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.#ctor(System.Boolean)">
            <summary>
            cTor: empty (will always init with 0 Values
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.#ctor(CoordLib.LLSize)">
            <summary>
            cTor: copy
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.#ctor(CoordLib.LLPoint)">
            <summary>
            cTor: From LLPoint values
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.#ctor(System.Double,System.Double)">
            <summary>
            cTor: from height (latitude) and width (longitude) as coordinates [deg]
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.op_Addition(CoordLib.LLSize,CoordLib.LLSize)">
            <summary>
            Addition: Adds the width and height of one Size structure to the width and height of another Size structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.op_Subtraction(CoordLib.LLSize,CoordLib.LLSize)">
            <summary>
            Subtraction: Subtracts the width and height of one Size structure from the width and height of another Size structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.op_Equality(CoordLib.LLSize,CoordLib.LLSize)">
            <summary>
            Equality: Tests whether two Size structures are equal.
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.op_Inequality(CoordLib.LLSize,CoordLib.LLSize)">
            <summary>
            Inequality: Tests whether two Size structures are different.
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.op_Explicit(CoordLib.LLSize)~CoordLib.LLPoint">
            <summary>
            Conversion: Returns an LLPoint from the values (X=Height,Lat / Y=Width,Lon)
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:CoordLib.LLSize.Add(CoordLib.LLSize,CoordLib.LLSize)">
            <summary>
            Adds the width and height of one Size structure to the width and height of another Size structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.Subtract(CoordLib.LLSize,CoordLib.LLSize)">
            <summary>
            Subtracts the width and height of one Size structure from the width and height of another Size structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a Size structure with the same dimensions as this Size structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.GetHashCode">
            <summary>
            Returns a hash code for this Size structure.
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.ToLLPoint">
            <summary>
            Returns the Values as LLPoint Struct
            </summary>
        </member>
        <member name="M:CoordLib.LLSize.ToString">
            <summary>
            Creates a human-readable string that represents this Size structure.
            </summary>
        </member>
        <member name="T:CoordLib.MercatorTiles.MapPixel">
            <summary>
            A MapPixel for Mercator Tile Projections
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.MapPixel.Empty">
            <summary>
            An emtpy (unusable) MapPixel at -1/-1
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.LatLonToMapPixel(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns the MapPixel for a coordinate on the tile at zoom level
            </summary>
            <param name="latLon,,">A coordinate</param>
            <param name="zoom">A zoomlevel</param>
            <returns>The MapPixel for the coordiate</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.LatLonToMapPixel(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns the MapPixel for a coordinate on the tile at zoom level
            </summary>
            <param name="lat,,">Latitude</param>
            <param name="lon,,">Longitude</param>
            <param name="zoom">A zoomlevel</param>
            <returns>The MapPixel for the coordiate</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.#ctor(System.Int32,System.Int32)">
            <summary>
            cTor: From X,Y
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.#ctor(CoordLib.MercatorTiles.MapPixel)">
            <summary>
            cTor: Copy constructor
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.#ctor(System.Drawing.Point)">
            <summary>
            cTor: From a Point
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.#ctor(CoordLib.LatLon,System.UInt16)">
            <summary>
            cTor: From LatLon at Zoom Level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.#ctor(System.Double,System.Double,System.UInt16)">
            <summary>
            cTor: From Latitude, Longitude at Zoom Level
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.MapPixel.X">
            <summary>
            The MapPixel X value
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.MapPixel.Y">
            <summary>
            The MapPixel Y value
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.AsPoint">
            <summary>
            Returns the MapPixel as Point
            </summary>
            <returns>A Point</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.op_Equality(CoordLib.MercatorTiles.MapPixel,CoordLib.MercatorTiles.MapPixel)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.op_Inequality(CoordLib.MercatorTiles.MapPixel,CoordLib.MercatorTiles.MapPixel)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.Equals(System.Object)">
            <summary>
            Equality towads another object
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.GetHashCode">
            <summary>
            Returns a Hashcode for this object
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.Offset(System.Int32,System.Int32)">
            <summary>
            Translates this MapPixel by the specified amount
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.ToTileXY">
            <summary>
            Tile coordinate from MapPixel coordinates
            </summary>
            <returns>A TileXY</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.Quadrant">
            <summary>
            Returns the Quadrant on a Tile where a MapPixel lies
            </summary>
            <returns>A Quadrant</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.ToLatLon(System.UInt16)">
            <summary>
            Get lat/lon coordinates from pixel coordinates
            </summary>
            <param name="zoom">A zoom level</param>
            <returns>A Coordinate</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.Resolution_m(System.UInt16)">
            <summary>
            Returns resolution of this pixel at a zoom level in meters
            - square pixels i.e. both sides have the same Resolution
            </summary>
            <param name="zoom"></param>
            <returns>Meters</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.MapPixel.Size_m(System.UInt16)">
            <summary>
            Returns SizeF of this pixel at a zoom level in meters
            </summary>
            <param name="zoom"></param>
            <returns>A SizeF in meters</returns>
        </member>
        <member name="T:CoordLib.MercatorTiles.Projection">
            <summary>
            Mercator Tile Projection base items
            </summary>
        </member>
        <member name="F:CoordLib.MercatorTiles.Projection.MinLatitude">
            <summary>
            Minimum Latitude (limited around the S-Pole)
            </summary>
        </member>
        <member name="F:CoordLib.MercatorTiles.Projection.MaxLatitude">
            <summary>
            Maximum Latitude (limited around the N-Pole)
            </summary>
        </member>
        <member name="F:CoordLib.MercatorTiles.Projection.MinLongitude">
            <summary>
            Minimum Longitude
            </summary>
        </member>
        <member name="F:CoordLib.MercatorTiles.Projection.MaxLongitude">
            <summary>
            Maximum Longitude
            </summary>
        </member>
        <member name="F:CoordLib.MercatorTiles.Projection.MinZoom">
            <summary>
            Minimum ZoomLevel
            </summary>
        </member>
        <member name="F:CoordLib.MercatorTiles.Projection.MaxZoom">
            <summary>
            Maximum ZoomLevel
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.Projection.TileSize">
            <summary>
            Size of tile
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.Projection.Axis">
            <summary>
            Semi-major axis of ellipsoid, in meters
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.Projection.Flattening">
            <summary>
            Flattening of ellipsoid
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapMinTileXY(System.UInt16)">
            <summary>
            Min. tile in tiles at custom zoom level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapMaxTileXY(System.UInt16)">
            <summary>
            Max. tile in tiles at custom zoom level
            </summary>
            <param name="zoom">A zoom level</param>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapSizeTileXY(System.UInt16)">
            <summary>
            Gets whole Map size in TileXY units
            </summary>
            <param name="zoom">A zoom level</param>
            <returns>A Size of [TileXY]</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapPixelSize(System.UInt16)">
            <summary>
            Returns MapPixel Size of the whole Map at zoom level
            </summary>
            <param name="zoom">A zoom level</param>
            <returns>Size of MapPixels</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapResolution_mPerPixel(System.UInt16,System.Double)">
            <summary>
            The resolution in meters of a single pixel at a Latitude
            </summary>
            <param name="zoom">A zoom level</param>
            <param name="latitude">Latitude degrees</param>
            <returns>Meters</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapResolution_mPerTile(System.UInt16,System.Double)">
            <summary>
            The resolution in meters of a single Tile at a Latitude
            </summary>
            <param name="zoom">A zoom level</param>
            <param name="latitude">Latitude degrees</param>
            <returns>Meters</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.LatLonToMapPixel(System.Double,System.Double,System.UInt16)">
            <summary>
            Get pixel coordinates from lat/lon as Mercator Projection
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Projection.MapPixelToLatLon(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Gets lat/lon coordinates from pixel coordinates
            </summary>
        </member>
        <member name="T:CoordLib.MercatorTiles.Quad">
            <summary>
            Quad Tree Item
            Based on the Mercator Projection Grid with a Quad Square Tile of 256x256
            see also: https://docs.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system
            
            The Quad at a ZoomLevel 1..23 is composed of digits base4 (0,1,2,3) other digits or characters are invalid
            Min Zoom is 1; Max Zoom is 23
            Note: a Quad which is empty (ZoomLevel 0) would represent the entire map 
            
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.Quad.Empty">
            <summary>
            An empty quad
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.LatLonToQuad(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns a Quad from a coordinate at zoom
            </summary>
            <param name="latLon">Coordinate</param>
            <param name="zoom">Zoomlevel</param>
            <returns>A Quadkey as String</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.LatLonToQuad(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns a Quad from a coordinate at zoom
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="zoom">Zoomlevel</param>
            <returns>A Quadkey as String</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.AtZoom(System.UInt16)">
            <summary>
            Returns a reduced Quad at the desired zoom
            If reduction not possible it returns the argument
            </summary>
            <param name="zoom">Zoomlevel</param>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Around(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns 4 Quads that are the closest neighbours of the argument
            including the one that includes the argument
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Around(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns 4 Quads that are the closest neighbours of the argument
            including the one that includes the argument
            </summary>
            <param name="latLon">A LatLon</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.#ctor(System.String)">
            <summary>
            cTor: Initialize from string (beware, no validity checks are made 
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.#ctor(CoordLib.MercatorTiles.Quad)">
            <summary>
            cTor: As copy of the argument
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.#ctor(CoordLib.LatLon,System.UInt16)">
            <summary>
            cTor: From a LatLon coordinate at a zoom level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.#ctor(System.Double,System.Double,System.UInt16)">
            <summary>
            cTor: From a Latitude, Longitude coordinate at a zoom level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.#ctor(System.Drawing.Point,System.UInt16)">
            <summary>
            cTor: From a TileXY coordinate at a zoom level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.ToString">
            <summary>
            Returns the string representation
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.op_Equality(CoordLib.MercatorTiles.Quad,CoordLib.MercatorTiles.Quad)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.op_Inequality(CoordLib.MercatorTiles.Quad,CoordLib.MercatorTiles.Quad)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.Equals(System.Object)">
            <summary>
            Equality towads another object
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.GetHashCode">
            <summary>
            Returns a Hashcode for this object
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.Quad.ZoomLevel">
            <summary>
            returns the ZoomLevel of this Quad
            Note: ZoomLevel 0 means an empty Quad.
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.HigherLevel">
            <summary>
            Returns the QuadKey of the zoomed out level of the argument
            can resolve in an empty string which is not really a Quad anymore
            </summary>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.LastQ">
            <summary>
            Returns the rightmost Quad Item (character)
            can resolve in an empty string which is not really a Quad cahr anymore
            </summary>
            <returns>The rightmost Quad Digit as string</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.LeftQ">
            <summary>
            Get the QuadKey left of the current one
            </summary>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.RightQ">
            <summary>
            Get the QuadKey right of the current one
            </summary>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.AboveQ">
            <summary>
            Get the QuadKey above of the current one
            </summary>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.Quad.BelowQ">
            <summary>
            Get the QuadKey below of the current one
            </summary>
            <returns>A Quad Key</returns>
        </member>
        <member name="T:CoordLib.MercatorTiles.QuadOp">
            <summary>
            Quad Tree Helper
            Based on the Mercator Projection Grid with a Quad Square Tile of 256x256
            see also: https://docs.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system
             
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.CheckQuad(System.String)">
            <summary>
            Checks a Quad for validity
            </summary>
            <param name="quad">A Quad string</param>
            <returns>True if valid</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.ZoomLevel(System.String)">
            <summary>
            returns the ZoomLevel of the argument
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.QuadAtZoom(System.String,System.UInt16)">
            <summary>
            Returns a reduced Quad at the desired zoom
            If reduction not possible it returns the argument
            </summary>
            <param name="quad">A quad</param>
            <param name="zoom">Zoomlevel 1..23 </param>
            <returns>A Quad Key (empty if zoom=0)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.LatLonToQuad(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns a Quad as String
            </summary>
            <param name="latLon">Coordinate</param>
            <param name="zoom">Zoomlevel</param>
            <returns>A Quadkey as String</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.LatLonToQuad(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns a Quad as String
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="zoom">Zoomlevel</param>
            <returns>A Quadkey as String</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.TileXYToQuad(System.Drawing.Point,System.UInt16)">
            <summary>
            Converts TileXY coordinates into a QuadKey at a specified level of detail.
            see also: https://docs.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system
            </summary>
            <param name="tileXY">Tile XY coordinate.</param>
            <param name="zoom">
                Level of detail, from 1 (lowest detail)
                to 22 (highest detail).
            </param>
            <returns>A string containing the QuadKey.</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.HigherLevel(System.String)">
            <summary>
            Returns the QuadKey of the zoomed out level of the argument
             if at top returns an empty one (whole Map at Zoom 0)
            </summary>
            <param name="quadKey">A Quad Key</param>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.LastQ(System.String)">
            <summary>
            Returns the rightmost Quad Item (character)
             if at top returns an empty one (whole Map at Zoom 0)
            </summary>
            <param name="quadKey">A Quad Key</param>
            <returns>The rightmost Quad Digit as string</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.LeftQ(System.String)">
            <summary>
            Get the QuadKey left of the current one
            </summary>
            <param name="quadKey">A Quad Key</param>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.RightQ(System.String)">
            <summary>
            Get the QuadKey right of the current one
            </summary>
            <param name="quadKey">A Quad Key</param>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.AboveQ(System.String)">
            <summary>
            Get the QuadKey above of the current one
            </summary>
            <param name="quadKey">A Quad Key</param>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.BelowQ(System.String)">
            <summary>
            Get the QuadKey below of the current one
            </summary>
            <param name="quadKey">A Quad Key</param>
            <returns>A Quad Key</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Around(System.Drawing.Point,System.UInt16)">
            <summary>
            Returns 4 Quads that are the closest neighbours of the argument
            </summary>
            <param name="mapPixel">A MapPixel</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Around(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns 4 Quads that are the closest neighbours of the argument
            </summary>
            <param name="latLon">A LatLon</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.QuadOp.Around(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns 4 Quads that are the closest neighbours of the argument
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="zoom">Zoomlevel</param>
            <returns>Array of neighbours -includes the argument</returns>
        </member>
        <member name="T:CoordLib.MercatorTiles.TileOp">
            <summary>
            Simple Mercator Projection Tiles Method set
            based on 256x256 Tiles
            where each tile has an XY Coord at a certain Zoom Level
            The complete map is layed out in MapPixels
            
            see also: https://docs.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system
             
            Level of Detail Map Width and      Ground              Map Scale    Tile Area ( at 96 dpi)
                             Height( pixels)   Resolution
                                              ( meters / pixel)
                   ..
                   10         262,144         152.8741           1 : 577,791.71      ~40km^2
                   11         524,288          76.4370           1 : 288,895.85      ~20km^2
                   12       1,048,576          38.2185           1 : 144,447.93      ~10km^2
                   13       2,097,152          19.1093           1 : 72,223.96        ~5km^2
                   14       4,194,304           9.5546           1 : 36,111.98      ~2.5km^2
                   15       8,388,608           4.7773           1 : 18,055.99     ~1.25km^2
                   
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.MapPixelToLatLon(System.Drawing.Point,System.UInt16)">
            <summary>
            Get lat/lon coordinates from pixel coordinates
            </summary>
            <param name="mapPixel"></param>
            <param name="zoom">A zoom level</param>
            <returns>A Coordinate</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.MapPixelToTileXY(System.Drawing.Point)">
            <summary>
            Tile coordinate from MapPixel coordinates
            </summary>
            <param name="mapPixel">A MapPixel</param>
            <returns>A TileXY</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.QuadrantFromMapPixel(System.Drawing.Point)">
            <summary>
            Returns the Quadrant on a Tile where a MapPixel lies
            </summary>
            <returns>A Quadrant</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileLtMapPixel(System.Drawing.Point)">
            <summary>
            MapPixel coordinate from tile coordinate (left/top corner)
            </summary>
            <param name="tileXY">A tileXY</param>
            <returns>a MapPixel (left/top corner)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileRtMapPixel(System.Drawing.Point)">
            <summary>
            MapPixel coordinate from tile coordinate (right/top corner)
            </summary>
            <param name="tileXY">A tileXY</param>
            <returns>a MapPixel (right/top corner)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileRbMapPixel(System.Drawing.Point)">
            <summary>
            MapPixel coordinate from tile coordinate (right/bottom corner)
            </summary>
            <param name="tileXY">A tileXY</param>
            <returns>a MapPixel (right/bottom corner)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileLbMapPixel(System.Drawing.Point)">
            <summary>
            MapPixel coordinate from tile coordinate (left/bottom corner)
            </summary>
            <param name="tileXY">A tileXY</param>
            <returns>a MapPixel (left/bottom corner)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileCenterMapPixel(System.Drawing.Point)">
            <summary>
            MapPixel coordinate from tile coordinate (top/left corner)
            </summary>
            <param name="tileXY">A tileXY</param>
            <returns>a MapPixel (top/left corner)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileLtLatLon(System.Drawing.Point,System.UInt16)">
            <summary>
            Returns the coordinate of the left top of the tileXY at zoom level
            </summary>
            <param name="tileXY">A tileXY</param>
            <param name="zoom">A zoom level</param>
            <returns>The coordinate of the left top</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.TileCenterLatLon(System.Drawing.Point,System.UInt16)">
            <summary>
            Returns the coordinate of the center of the tileXY at zoom level
            </summary>
            <param name="tileXY">A tileXY</param>
            <param name="zoom">A zoom level</param>
            <returns>The coordinate of the center</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.LatLonToTileXY(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns the TileXY for a coordinate on the tile at zoom level
            </summary>
            <param name="coord">A coordinate</param>
            <param name="zoom">A zoomlevel</param>
            <returns>The TileXY where the coordiate is located on</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.LatLonToMapPixel(CoordLib.LatLon,System.UInt16)">
            <summary>
            Get pixel coordinates from lat/lon
            </summary>
            <param name="coord"></param>
            <param name="zoom">A zoom level</param>
            <returns>A MapPixel</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.QuadrantFromLatLon(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns the Quadrant on a Tile where a coordinate lies
            </summary>
            <returns>A Quadrant</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.LatLonToMapPixel(System.Double,System.Double,System.UInt16)">
            <summary>
            Get pixel coordinates from lat/lon as Mercator Projection
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileOp.MapPixelToLatLon(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Gets lat/lon coordinates from pixel coordinates
            </summary>
        </member>
        <member name="T:CoordLib.MercatorTiles.TileQuadrant">
            <summary>
            A Tile Quadrant designation
            </summary>
        </member>
        <member name="T:CoordLib.MercatorTiles.TileXY">
            <summary>
            Simple Mercator Projection Tiles Method set
            based on 256x256 Tiles
            where each tile has an XY Coord at a certain Zoom Level
            The complete map is layed out in MapPixels
            
            see also: https://docs.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system
             
            Level of Detail Map Width and      Ground              Map Scale    Tile Area ( at 96 dpi)
                             Height( pixels)   Resolution
                                              ( meters / pixel)
                   ..
                   10         262,144         152.8741           1 : 577,791.71      ~40km^2
                   11         524,288          76.4370           1 : 288,895.85      ~20km^2
                   12       1,048,576          38.2185           1 : 144,447.93      ~10km^2
                   13       2,097,152          19.1093           1 : 72,223.96        ~5km^2
                   14       4,194,304           9.5546           1 : 36,111.98      ~2.5km^2
                   15       8,388,608           4.7773           1 : 18,055.99     ~1.25km^2
                   
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.Empty">
            <summary>
            An emtpy (unusable) TileXY at -1/-1
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.LatLonToTileXY(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns the TileXY for a coordinate on the tile at zoom level
            </summary>
            <param name="latLon,,">A coordinate</param>
            <param name="zoom">A zoomlevel</param>
            <returns>The TileXY where the coordiate is located on</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.LatLonToTileXY(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns the TileXY for a coordinate on the tile at zoom level
            </summary>
            <param name="lat,,">Latitude</param>
            <param name="lon,,">Longitude</param>
            <param name="zoom">A zoomlevel</param>
            <returns>The TileXY where the coordiate is located on</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.QuadrantFromLatLon(CoordLib.LatLon,System.UInt16)">
            <summary>
            Returns the Quadrant on a Tile where a coordinate lies
            </summary>
            <param name="latLon,,">A coordinate</param>
            <param name="zoom">A zoomlevel</param>
            <returns>A Quadrant</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.QuadrantFromLatLon(System.Double,System.Double,System.UInt16)">
            <summary>
            Returns the Quadrant on a Tile where a coordinate lies
            </summary>
            <param name="lat,,">Latitude</param>
            <param name="lon,,">Longitude</param>
            <param name="zoom">A zoomlevel</param>
            <returns>A Quadrant</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.#ctor(System.Int32,System.Int32)">
            <summary>
            cTor: From X,Y (defaults to 0/0)
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.#ctor(CoordLib.MercatorTiles.TileXY)">
            <summary>
            cTor: Copy constructor
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.#ctor(System.Drawing.Point)">
            <summary>
            cTor: From a Point
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.#ctor(CoordLib.LatLon,System.UInt16)">
            <summary>
            cTor: From LatLon at Zoom Level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.#ctor(System.Double,System.Double,System.UInt16)">
            <summary>
            cTor: From Latitude, Longitude at Zoom Level
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.op_Equality(CoordLib.MercatorTiles.TileXY,CoordLib.MercatorTiles.TileXY)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.op_Inequality(CoordLib.MercatorTiles.TileXY,CoordLib.MercatorTiles.TileXY)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.Equals(System.Object)">
            <summary>
            Equality towads another object
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.GetHashCode">
            <summary>
            Returns a Hashcode for this object
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.Offset(System.Int32,System.Int32)">
            <summary>
            Translates this Tile by the specified amount
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.X">
            <summary>
            The tiles X value
            </summary>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.Y">
            <summary>
            The tiles Y value
            </summary>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.AsPoint">
            <summary>
            Returns the TileXY as Point
            </summary>
            <returns>A Point</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.QuadKey(System.UInt16)">
            <summary>
            Returns a Quad(Key) for this Tile at Zoom Level
            </summary>
            <param name="zoom">A ZoomLevel</param>
            <returns>A Quad</returns>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.LeftTopMapPixel">
            <summary>
            MapPixel coordinate from tile coordinate (left/top corner)
            </summary>
            <returns>a MapPixel (left/top corner)</returns>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.RightTopMapPixel">
            <summary>
            MapPixel coordinate from tile coordinate (right/top corner)
            </summary>
            <returns>a MapPixel (right/top corner)</returns>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.RightBottomMapPixel">
            <summary>
            MapPixel coordinate from tile coordinate (right/bottom corner)
            </summary>
            <returns>a MapPixel (right/bottom corner)</returns>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.LeftBottomMapPixel">
            <summary>
            MapPixel coordinate from tile coordinate (left/bottom corner)
            </summary>
            <returns>a MapPixel (left/bottom corner)</returns>
        </member>
        <member name="P:CoordLib.MercatorTiles.TileXY.CenterMapPixel">
            <summary>
            MapPixel coordinate from tile coordinate (left/top corner)
            </summary>
            <returns>a MapPixel (left/top corner)</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.LeftTopLatLon(System.UInt16)">
            <summary>
            Returns the coordinate of the left top corner of the tileXY at zoom level
            </summary>
            <param name="zoom">A zoom level</param>
            <returns>The coordinate of the left top corner</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.CenterLatLon(System.UInt16)">
            <summary>
            Returns the coordinate of the center of the tileXY at zoom level
            </summary>
            <param name="zoom">A zoom level</param>
            <returns>The coordinate of the center</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.Resolution_m(System.UInt16)">
            <summary>
            Returns resolution of this tile at a zoom level in meters
            - square tiles i.e. both sides have the same Resolution
            </summary>
            <param name="zoom"></param>
            <returns>Meters</returns>
        </member>
        <member name="M:CoordLib.MercatorTiles.TileXY.Size_m(System.UInt16)">
            <summary>
            Returns SizeF of this tile at a zoom level in meters
            </summary>
            <param name="zoom"></param>
            <returns>A SizeF in meters</returns>
        </member>
    </members>
</doc>
